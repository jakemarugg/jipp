{%- if not noheader -%}
// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by {{ app }}. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on {{ updated }}
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

{%- endif %}

/**
 * Data object corresponding to a "{{ collection.name }}" collection{%- if collection.specs %} as defined in:{%- for spec in collection.specs | sort %}
 * [{{ spec | upper }}]({{ specs[spec] }}){{ "," if not loop.last }}{%- endfor %}{%- else %}{%- endif %}.{%- if collection['refs']%}
 *
 * Also used by:{%- for ref in collection['refs'] | sort %}
 *   * `{{ ref }}`{%- endfor%}{%- endif %}
 */
@Suppress("RedundantCompanionReference", "unused")
data class {{ collection.name | camel_class }}
@JvmOverloads constructor(
{%- for name, member in collection.members | dictsort %}
    val {{ name | camel_member }}: {%- if member.set %} List<{{ member.ktype }}>{% else %} {{ member.ktype }}{% endif %}? = null,
{%- endfor %}
    val _extras: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    /** Generate attribute list */
    override val attributes: AttributeCollection by lazy {
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
{%- for name, member in collection.members | dictsort %}
            {{ name | camel_member }}?.also {
                add(Members.{{name | camel_member}}.of(it))
            }
{%- endfor %}
        } + _extras)
    }

    /** Type for attributes of this collection */
    class Type(name: String): TypedCollectionType<{{ collection.name | camel_class }}>(Members, name)

    companion object Members : CollectionParser<{{ collection.name | camel_class }}> {
        override val typeName = {{ collection.name | camel_class}}::class.java.simpleName!!
        override fun fromAttributes(attributes: List<Attribute<*>>): {{ collection.name | camel_class }} {
            val remain = attributes.toMutableList()
            return {{ collection.name | camel_class}}(
{%- for name, member in collection.members | dictsort %}
{%- if member.set %}
                extractAll{% else %}
                extractOne{% endif %}(remain, {{ name | camel_member }})
                {%- if member.ktype_accessor %}?.{{ member.ktype_accessor }}{%- endif %},
{%- endfor %}
                _extras = remain)
        }

{%- for name, member in collection.members | dictsort %}
        /** "{{ member.name }}" member type */
        @JvmField val {{ member.name | camel_member }} = {{ member.intro }}"{{ member.name }}")
{%- endfor %}
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [{{ collection.name | camel_class}}] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            {%- for name, member in collection.members | dictsort %}
            /** "{{ member.name }}" member type */
            @JvmField val {{ member.name | camel_member }} = Keywords(Members.{{ member.name | camel_member }}.name)
            {%- endfor %}

            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }

{%- for name, member in collection.members | dictsort %}{%- if member.inner %}

{{ member.inner }}{%- endif %}{%- endfor %}
}

