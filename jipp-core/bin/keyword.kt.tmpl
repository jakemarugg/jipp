// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by {{ app }}. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on {{ updated }}
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg
{%- if keyword.orName %}

import com.hp.jipp.encoding.KeywordOrName
import com.hp.jipp.encoding.KeywordType
import com.hp.jipp.encoding.Tag
{%- else %}

import com.hp.jipp.encoding.Keyword
import com.hp.jipp.encoding.KeywordType
{%- endif %}

/**
 * "{{ keyword.fullname }}" keyword as defined in {%- for spec in keyword.specs | sort %}
 * [{{ spec | upper }}]({{ specs[spec] }}){{ "," if not loop.last }}{%- endfor %}.{%- if keyword['refs']%}
 *
 * Also used by:{%- for ref in keyword['refs'] | sort %}
 *   * `{{ ref }}`{%- endfor%}{%- endif %}
 */
data class {{ keyword.name | camel_class }}(
    override val value: String{%- if keyword.orName %},
    override val tag: Tag = Tag.keyword,
    override val language: String? = null
) : KeywordOrName() {

    /** Construct a [Tag.keyword] form of this preset */
    constructor(value: String): this(value, Tag.keyword)
{%- else %}
) : Keyword() {
{%- endif %}

    override fun toString() = value

    /** An attribute type for [{{ keyword.name | camel_class }}] attributes */
    class Type(name: String) : KeywordType<{{ keyword.name | camel_class }}>(Encoder, name)

    companion object {
{%- for value in keyword['values'] | sort %}
        @JvmField val {{ value | camel_member }} = {{ keyword.name | camel_class }}("{{ value }}")
{%- endfor %}
{%- if keyword.orName %}
        @JvmField val Encoder = KeywordType.encoderOf({{ keyword.name | camel_class }}::class.java) { value, tag, language ->
            {{ keyword.name | camel_class }}(value, tag, language)
{%- else %}
        @JvmField val Encoder = KeywordType.encoderOf({{ keyword.name | camel_class }}::class.java) { value, _, _ ->
            {{ keyword.name | camel_class }}(value)
{%- endif %}
        }
    }
}

