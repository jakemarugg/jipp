// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by {{ app }}. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on {{ updated }}
@file:Suppress("MaxLineLength")

package com.hp.jipp.model

import com.hp.jipp.encoding.Enum
import com.hp.jipp.encoding.EnumType

/**
 * "{{ enum.name }}" enum as defined in:{%- for spec in enum.specs | sort %}
 *   * [{{ spec | upper }}]({{ specs[spec] }}){%- endfor %}{%- if enum['refs']%}
 *
 * Also used by:{%- for ref in enum['refs'] | sort %}
 *   * `{{ ref }}`{%- endfor%}{%- endif %}
 */
data class {{ enum.name | camel_class }}(override val code: Int, override val name: String) : Enum() {

    override fun toString() = super.toString()

    /** An attribute type for [{{ enum.name | camel_class }}] attributes */
    class Type(name: String) : EnumType<{{ enum.name | camel_class }}>(Encoder, name)

    object Code {
{%- for name, value in enum['values'] | dictsort(false, 'value') %}
        const val {{ name | camel_member }} = {%- if enum.hex %} 0x{{ '%04X' % value }}{% else %} {{ value }}{%- endif %}
{%- endfor %}
    }

    companion object {
{%- for name, value in enum['values'] | dictsort(false, 'value') %}
        @JvmField val {{ name | camel_member }} = {{ enum.name | camel_class }}(Code.{{ name | camel_member }}, "{{ name }}")
{%- endfor %}

        @JvmField val Encoder = EnumType.Encoder({{ enum.name | camel_class }}::class.java) { code, name ->
            {{ enum.name | camel_class }}(code, name)
        }
    }
}

