// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py
@file:Suppress("MaxLineLength")

package com.hp.jipp.model

import com.hp.jipp.encoding.Enum
import com.hp.jipp.encoding.EnumType

/**
 * "operation" enum as defined in
 * [APPLE20150505-2](http://www.pwg.org/pipermail/ipp/2015/018516.html),
 *  [APPLE20150505-3](http://www.pwg.org/pipermail/ipp/2015/018518.html),
 *  [IPPGUPA](https://ftp.pwg.org/pub/pwg/ipp/registrations/reg-ippgupa-20171214.pdf),
 *  [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf),
 *  [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf),
 *  [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf),
 *  [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf),
 *  [PWG5100.18](http://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf),
 *  [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf),
 *  [RFC3380](http://www.iana.org/go/rfc3380),
 *  [RFC3995](http://www.iana.org/go/rfc3995),
 *  [RFC3996](http://www.iana.org/go/rfc3996),
 *  [RFC3998](http://www.iana.org/go/rfc3998),
 *  [RFC8011](http://www.iana.org/go/rfc8011)
 */
data class Operation(override val code: Int, override val name: String) : Enum() {

    override fun toString() = super.toString()

    /** An attribute type for [Operation] attributes */
    class Type(name: String) : EnumType<Operation>(Encoder, name)

    object Code {
        const val printJob = 2
        const val printUri = 3
        const val validateJob = 4
        const val createJob = 5
        const val sendDocument = 6
        const val sendUri = 7
        const val cancelJob = 8
        const val getJobAttributes = 9
        const val getJobs = 10
        const val getPrinterAttributes = 11
        const val holdJob = 12
        const val releaseJob = 13
        const val restartJob = 14
        const val pausePrinter = 16
        const val resumePrinter = 17
        const val purgeJobs = 18
        const val setPrinterAttributes = 19
        const val setJobAttributes = 20
        const val getPrinterSupportedValues = 21
        const val createPrinterSubscriptions = 22
        const val createJobSubscriptions = 23
        const val getSubscriptionAttributes = 24
        const val getSubscriptions = 25
        const val renewSubscription = 26
        const val cancelSubscription = 27
        const val getNotifications = 28
        const val enablePrinter = 34
        const val disablePrinter = 35
        const val pausePrinterAfterCurrentJob = 36
        const val holdNewJobs = 37
        const val releaseHeldNewJobs = 38
        const val deactivatePrinter = 39
        const val activatePrinter = 40
        const val restartPrinter = 41
        const val shutdownPrinter = 42
        const val startupPrinter = 43
        const val reprocessJob = 44
        const val cancelCurrentJob = 45
        const val suspendCurrentJob = 46
        const val resumeJob = 47
        const val promoteJob = 48
        const val scheduleJobAfter = 49
        const val cancelDocument = 51
        const val getDocumentAttributes = 52
        const val getDocuments = 53
        const val deleteDocument = 54
        const val setDocumentAttributes = 55
        const val cancelJobs = 56
        const val cancelMyJobs = 57
        const val resubmitJob = 58
        const val closeJob = 59
        const val identifyPrinter = 60
        const val validateDocument = 61
        const val addDocumentImages = 62
        const val acknowledgeDocument = 63
        const val acknowledgeIdentifyPrinter = 64
        const val acknowledgeJob = 65
        const val fetchDocument = 66
        const val fetchJob = 67
        const val getOutputDeviceAttributes = 68
        const val updateActiveJobs = 69
        const val deregisterOutputDevice = 70
        const val updateDocumentStatus = 71
        const val updateJobStatus = 72
        const val updateOutputDeviceAttributes = 73
        const val getNextDocumentData = 74
        const val getUserPrinterAttributes = 102
    }

    companion object {
        @JvmField val printJob = Operation(Code.printJob, "Print-Job")
        @JvmField val printUri = Operation(Code.printUri, "Print-URI")
        @JvmField val validateJob = Operation(Code.validateJob, "Validate-Job")
        @JvmField val createJob = Operation(Code.createJob, "Create-Job")
        @JvmField val sendDocument = Operation(Code.sendDocument, "Send-Document")
        @JvmField val sendUri = Operation(Code.sendUri, "Send-URI")
        @JvmField val cancelJob = Operation(Code.cancelJob, "Cancel-Job")
        @JvmField val getJobAttributes = Operation(Code.getJobAttributes, "Get-Job-Attributes")
        @JvmField val getJobs = Operation(Code.getJobs, "Get-Jobs")
        @JvmField val getPrinterAttributes = Operation(Code.getPrinterAttributes, "Get-Printer-Attributes")
        @JvmField val holdJob = Operation(Code.holdJob, "Hold-Job")
        @JvmField val releaseJob = Operation(Code.releaseJob, "Release-Job")
        @JvmField val restartJob = Operation(Code.restartJob, "Restart-Job")
        @JvmField val pausePrinter = Operation(Code.pausePrinter, "Pause-Printer")
        @JvmField val resumePrinter = Operation(Code.resumePrinter, "Resume-Printer")
        @JvmField val purgeJobs = Operation(Code.purgeJobs, "Purge-Jobs")
        @JvmField val setPrinterAttributes = Operation(Code.setPrinterAttributes, "Set-Printer-Attributes")
        @JvmField val setJobAttributes = Operation(Code.setJobAttributes, "Set-Job-Attributes")
        @JvmField val getPrinterSupportedValues = Operation(Code.getPrinterSupportedValues, "Get-Printer-Supported-Values")
        @JvmField val createPrinterSubscriptions = Operation(Code.createPrinterSubscriptions, "Create-Printer-Subscriptions")
        @JvmField val createJobSubscriptions = Operation(Code.createJobSubscriptions, "Create-Job-Subscriptions")
        @JvmField val getSubscriptionAttributes = Operation(Code.getSubscriptionAttributes, "Get-Subscription-Attributes")
        @JvmField val getSubscriptions = Operation(Code.getSubscriptions, "Get-Subscriptions")
        @JvmField val renewSubscription = Operation(Code.renewSubscription, "Renew-Subscription")
        @JvmField val cancelSubscription = Operation(Code.cancelSubscription, "Cancel-Subscription")
        @JvmField val getNotifications = Operation(Code.getNotifications, "Get-Notifications")
        @JvmField val enablePrinter = Operation(Code.enablePrinter, "Enable-Printer")
        @JvmField val disablePrinter = Operation(Code.disablePrinter, "Disable-Printer")
        @JvmField val pausePrinterAfterCurrentJob = Operation(Code.pausePrinterAfterCurrentJob, "Pause-Printer-After-Current-Job")
        @JvmField val holdNewJobs = Operation(Code.holdNewJobs, "Hold-New-Jobs")
        @JvmField val releaseHeldNewJobs = Operation(Code.releaseHeldNewJobs, "Release-Held-New-Jobs")
        @JvmField val deactivatePrinter = Operation(Code.deactivatePrinter, "Deactivate-Printer")
        @JvmField val activatePrinter = Operation(Code.activatePrinter, "Activate-Printer")
        @JvmField val restartPrinter = Operation(Code.restartPrinter, "Restart-Printer")
        @JvmField val shutdownPrinter = Operation(Code.shutdownPrinter, "Shutdown-Printer")
        @JvmField val startupPrinter = Operation(Code.startupPrinter, "Startup-Printer")
        @JvmField val reprocessJob = Operation(Code.reprocessJob, "Reprocess-Job")
        @JvmField val cancelCurrentJob = Operation(Code.cancelCurrentJob, "Cancel-Current-Job")
        @JvmField val suspendCurrentJob = Operation(Code.suspendCurrentJob, "Suspend-Current-Job")
        @JvmField val resumeJob = Operation(Code.resumeJob, "Resume-Job")
        @JvmField val promoteJob = Operation(Code.promoteJob, "Promote-Job")
        @JvmField val scheduleJobAfter = Operation(Code.scheduleJobAfter, "Schedule-Job-After")
        @JvmField val cancelDocument = Operation(Code.cancelDocument, "Cancel-Document")
        @JvmField val getDocumentAttributes = Operation(Code.getDocumentAttributes, "Get-Document-Attributes")
        @JvmField val getDocuments = Operation(Code.getDocuments, "Get-Documents")
        @JvmField val deleteDocument = Operation(Code.deleteDocument, "Delete-Document")
        @JvmField val setDocumentAttributes = Operation(Code.setDocumentAttributes, "Set-Document-Attributes")
        @JvmField val cancelJobs = Operation(Code.cancelJobs, "Cancel-Jobs")
        @JvmField val cancelMyJobs = Operation(Code.cancelMyJobs, "Cancel-My-Jobs")
        @JvmField val resubmitJob = Operation(Code.resubmitJob, "Resubmit-Job")
        @JvmField val closeJob = Operation(Code.closeJob, "Close-Job")
        @JvmField val identifyPrinter = Operation(Code.identifyPrinter, "Identify-Printer")
        @JvmField val validateDocument = Operation(Code.validateDocument, "Validate-Document")
        @JvmField val addDocumentImages = Operation(Code.addDocumentImages, "Add-Document-Images")
        @JvmField val acknowledgeDocument = Operation(Code.acknowledgeDocument, "Acknowledge-Document")
        @JvmField val acknowledgeIdentifyPrinter = Operation(Code.acknowledgeIdentifyPrinter, "Acknowledge-Identify-Printer")
        @JvmField val acknowledgeJob = Operation(Code.acknowledgeJob, "Acknowledge-Job")
        @JvmField val fetchDocument = Operation(Code.fetchDocument, "Fetch-Document")
        @JvmField val fetchJob = Operation(Code.fetchJob, "Fetch-Job")
        @JvmField val getOutputDeviceAttributes = Operation(Code.getOutputDeviceAttributes, "Get-Output-Device-Attributes")
        @JvmField val updateActiveJobs = Operation(Code.updateActiveJobs, "Update-Active-Jobs")
        @JvmField val deregisterOutputDevice = Operation(Code.deregisterOutputDevice, "Deregister-Output-Device")
        @JvmField val updateDocumentStatus = Operation(Code.updateDocumentStatus, "Update-Document-Status")
        @JvmField val updateJobStatus = Operation(Code.updateJobStatus, "Update-Job-Status")
        @JvmField val updateOutputDeviceAttributes = Operation(Code.updateOutputDeviceAttributes, "Update-Output-Device-Attributes")
        @JvmField val getNextDocumentData = Operation(Code.getNextDocumentData, "Get-Next-Document-Data")
        @JvmField val getUserPrinterAttributes = Operation(Code.getUserPrinterAttributes, "Get-User-Printer-Attributes")

        @JvmField val Encoder = EnumType.Encoder(Operation::class.java) { code, name ->
            Operation(code, name)
        }
    }
}
