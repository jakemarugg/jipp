// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.Keyword
import com.hp.jipp.encoding.KeywordType

/**
 * "material-type" keyword as defined in
 * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf).
 */
data class MaterialType(
    override val value: String
) : Keyword() {

    override fun toString() = value

    /** An attribute type for [MaterialType] attributes */
    class Type(name: String) : KeywordType<MaterialType>(Encoder, name)

    companion object {
        @JvmField val abs = MaterialType("abs")
        @JvmField val absCarbonFiber = MaterialType("abs-carbon-fiber")
        @JvmField val absCarbonNanotube = MaterialType("abs-carbon-nanotube")
        @JvmField val chocolate = MaterialType("chocolate")
        @JvmField val gold = MaterialType("gold")
        @JvmField val nylon = MaterialType("nylon")
        @JvmField val pet = MaterialType("pet")
        @JvmField val photopolymer = MaterialType("photopolymer")
        @JvmField val pla = MaterialType("pla")
        @JvmField val plaConductive = MaterialType("pla-conductive")
        @JvmField val plaFlexible = MaterialType("pla-flexible")
        @JvmField val plaMagnetic = MaterialType("pla-magnetic")
        @JvmField val plaSteel = MaterialType("pla-steel")
        @JvmField val plaStone = MaterialType("pla-stone")
        @JvmField val plaWood = MaterialType("pla-wood")
        @JvmField val polycarbonate = MaterialType("polycarbonate")
        @JvmField val pvaDissolvable = MaterialType("pva-dissolvable")
        @JvmField val silver = MaterialType("silver")
        @JvmField val titanium = MaterialType("titanium")
        @JvmField val wax = MaterialType("wax")
        @JvmField val Encoder = KeywordType.encoderOf(MaterialType::class.java) { value, _, _ ->
            MaterialType(value)
        }
    }
}
