// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.Keyword
import com.hp.jipp.encoding.KeywordType

/**
 * "job-state-reasons" keyword as defined in:
 *   * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
 *   * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
 *   * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
 *   * [PWG5100.16](http://ftp.pwg.org/pub/pwg/candidates/cs-ipptrans10-20131108-5100.16.pdf)
 *   * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf)
 *   * [PWG5100.18](http://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf)
 *   * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
 *   * [PWG5100.7](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobext10-20031031-5100.7.pdf)
 *   * [RFC3998](http://www.iana.org/go/rfc3998)
 *   * [RFC8011](http://www.iana.org/go/rfc8011)
 */
data class JobStateReasons(
    override val value: String
) : Keyword() {

    override fun toString() = value

    /** An attribute type for [JobStateReasons] attributes */
    class Type(name: String) : KeywordType<JobStateReasons>(Encoder, name)

    companion object {
        @JvmField val abortedBySystem = JobStateReasons("aborted-by-system")
        @JvmField val accountAuthorizationFailed = JobStateReasons("account-authorization-failed")
        @JvmField val accountClosed = JobStateReasons("account-closed")
        @JvmField val accountInfoNeeded = JobStateReasons("account-info-needed")
        @JvmField val accountLimitReached = JobStateReasons("account-limit-reached")
        @JvmField val compressionError = JobStateReasons("compression-error")
        @JvmField val conflictingAttributes = JobStateReasons("conflicting-attributes")
        @JvmField val connectedToDestination = JobStateReasons("connected-to-destination")
        @JvmField val connectingToDestination = JobStateReasons("connecting-to-destination")
        @JvmField val destinationUriFailed = JobStateReasons("destination-uri-failed")
        @JvmField val digitalSignatureDidNotVerify = JobStateReasons("digital-signature-did-not-verify")
        @JvmField val digitalSignatureTypeNotSupported = JobStateReasons("digital-signature-type-not-supported")
        @JvmField val documentAccessError = JobStateReasons("document-access-error")
        @JvmField val documentFormatError = JobStateReasons("document-format-error")
        @JvmField val documentPasswordError = JobStateReasons("document-password-error")
        @JvmField val documentPermissionError = JobStateReasons("document-permission-error")
        @JvmField val documentSecurityError = JobStateReasons("document-security-error")
        @JvmField val documentUnprintableError = JobStateReasons("document-unprintable-error")
        @JvmField val errorsDetected = JobStateReasons("errors-detected")
        @JvmField val jobCanceledAtDevice = JobStateReasons("job-canceled-at-device")
        @JvmField val jobCanceledByOperator = JobStateReasons("job-canceled-by-operator")
        @JvmField val jobCanceledByUser = JobStateReasons("job-canceled-by-user")
        @JvmField val jobCompletedSuccessfully = JobStateReasons("job-completed-successfully")
        @JvmField val jobCompletedWithErrors = JobStateReasons("job-completed-with-errors")
        @JvmField val jobCompletedWithWarnings = JobStateReasons("job-completed-with-warnings")
        @JvmField val jobDataInsufficient = JobStateReasons("job-data-insufficient")
        @JvmField val jobDelayOutputUntilSpecified = JobStateReasons("job-delay-output-until-specified")
        @JvmField val jobDigitalSignatureWait = JobStateReasons("job-digital-signature-wait")
        @JvmField val jobFetchable = JobStateReasons("job-fetchable")
        @JvmField val jobHeldForReview = JobStateReasons("job-held-for-review")
        @JvmField val jobHoldUntilSpecified = JobStateReasons("job-hold-until-specified")
        @JvmField val jobIncoming = JobStateReasons("job-incoming")
        @JvmField val jobInterpreting = JobStateReasons("job-interpreting")
        @JvmField val jobOutgoing = JobStateReasons("job-outgoing")
        @JvmField val jobPasswordWait = JobStateReasons("job-password-wait")
        @JvmField val jobPrintedSuccessfully = JobStateReasons("job-printed-successfully")
        @JvmField val jobPrintedWithErrors = JobStateReasons("job-printed-with-errors")
        @JvmField val jobPrintedWithWarnings = JobStateReasons("job-printed-with-warnings")
        @JvmField val jobPrinting = JobStateReasons("job-printing")
        @JvmField val jobQueued = JobStateReasons("job-queued")
        @JvmField val jobQueuedForMarker = JobStateReasons("job-queued-for-marker")
        @JvmField val jobReleaseWait = JobStateReasons("job-release-wait")
        @JvmField val jobRestartable = JobStateReasons("job-restartable")
        @JvmField val jobResuming = JobStateReasons("job-resuming")
        @JvmField val jobSavedSuccessfully = JobStateReasons("job-saved-successfully")
        @JvmField val jobSavedWithErrors = JobStateReasons("job-saved-with-errors")
        @JvmField val jobSavedWithWarnings = JobStateReasons("job-saved-with-warnings")
        @JvmField val jobSaving = JobStateReasons("job-saving")
        @JvmField val jobSpooling = JobStateReasons("job-spooling")
        @JvmField val jobStreaming = JobStateReasons("job-streaming")
        @JvmField val jobSuspended = JobStateReasons("job-suspended")
        @JvmField val jobSuspendedByOperator = JobStateReasons("job-suspended-by-operator")
        @JvmField val jobSuspendedBySystem = JobStateReasons("job-suspended-by-system")
        @JvmField val jobSuspendedByUser = JobStateReasons("job-suspended-by-user")
        @JvmField val jobSuspending = JobStateReasons("job-suspending")
        @JvmField val jobTransferring = JobStateReasons("job-transferring")
        @JvmField val jobTransforming = JobStateReasons("job-transforming")
        @JvmField val none = JobStateReasons("none")
        @JvmField val printerStopped = JobStateReasons("printer-stopped")
        @JvmField val printerStoppedPartly = JobStateReasons("printer-stopped-partly")
        @JvmField val processingToStopPoint = JobStateReasons("processing-to-stop-point")
        @JvmField val queuedInDevice = JobStateReasons("queued-in-device")
        @JvmField val resourcesAreNotReady = JobStateReasons("resources-are-not-ready")
        @JvmField val resourcesAreNotSupported = JobStateReasons("resources-are-not-supported")
        @JvmField val serviceOffLine = JobStateReasons("service-off-line")
        @JvmField val submissionInterrupted = JobStateReasons("submission-interrupted")
        @JvmField val unsupportedAttributesOrValues = JobStateReasons("unsupported-attributes-or-values")
        @JvmField val unsupportedCompression = JobStateReasons("unsupported-compression")
        @JvmField val unsupportedDocumentFormat = JobStateReasons("unsupported-document-format")
        @JvmField val waitingForUserAction = JobStateReasons("waiting-for-user-action")
        @JvmField val warningsDetected = JobStateReasons("warnings-detected")
        @JvmField val Encoder = KeywordType.encoderOf(JobStateReasons::class.java) { value, _, _ ->
            JobStateReasons(value)
        }
    }
}
