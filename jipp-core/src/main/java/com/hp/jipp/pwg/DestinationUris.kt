// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "destination-uris" collection as defined in:
 * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf),
 * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class DestinationUris
@JvmOverloads constructor(
    val destinationAttributes: List<AttributeCollection>? = null,
    val destinationUri: java.net.URI? = null,
    val postDialString: String? = null,
    val preDialString: String? = null,
    val t33Subaddress: Int? = null,
    val _extras: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    /** Generate attribute list */
    override val attributes: AttributeCollection by lazy {
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
            destinationAttributes?.also {
                add(Members.destinationAttributes.of(it))
            }
            destinationUri?.also {
                add(Members.destinationUri.of(it))
            }
            postDialString?.also {
                add(Members.postDialString.of(it))
            }
            preDialString?.also {
                add(Members.preDialString.of(it))
            }
            t33Subaddress?.also {
                add(Members.t33Subaddress.of(it))
            }
        } + _extras)
    }

    /** Type for attributes of this collection */
    class Type(name: String): TypedCollectionType<DestinationUris>(Members, name)

    companion object Members : CollectionParser<DestinationUris> {
        override val typeName = DestinationUris::class.java.simpleName!!
        override fun fromAttributes(attributes: List<Attribute<*>>): DestinationUris {
            val remain = attributes.toMutableList()
            return DestinationUris(
                extractAll(remain, destinationAttributes),
                extractOne(remain, destinationUri),
                extractOne(remain, postDialString)?.value,
                extractOne(remain, preDialString)?.value,
                extractOne(remain, t33Subaddress),
                _extras = remain)
        }
        /** "destination-attributes" member type */
        @JvmField val destinationAttributes = CollectionType("destination-attributes")
        /** "destination-uri" member type */
        @JvmField val destinationUri = UriType("destination-uri")
        /** "post-dial-string" member type */
        @JvmField val postDialString = TextType(127, "post-dial-string")
        /** "pre-dial-string" member type */
        @JvmField val preDialString = TextType(127, "pre-dial-string")
        /** "t33-subaddress" member type */
        @JvmField val t33Subaddress = IntegerType("t33-subaddress")
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [DestinationUris] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            /** "destination-attributes" member type */
            @JvmField val destinationAttributes = Keywords(Members.destinationAttributes.name)
            /** "destination-uri" member type */
            @JvmField val destinationUri = Keywords(Members.destinationUri.name)
            /** "post-dial-string" member type */
            @JvmField val postDialString = Keywords(Members.postDialString.name)
            /** "pre-dial-string" member type */
            @JvmField val preDialString = Keywords(Members.preDialString.name)
            /** "t33-subaddress" member type */
            @JvmField val t33Subaddress = Keywords(Members.t33Subaddress.name)

            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }
}
