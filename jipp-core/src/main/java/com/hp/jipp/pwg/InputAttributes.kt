// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "input-attributes" collection as defined in:
 *   * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
 */
data class InputAttributes
@JvmOverloads constructor(
    val inputAutoScaling: Boolean? = null,
    val inputAutoSkewCorrection: Boolean? = null,
    val inputBrightness: Int? = null,
    val inputColorMode: InputColorMode? = null,
    val inputContentType: InputContentType? = null,
    val inputContrast: Int? = null,
    val inputFilmScanMode: InputFilmScanMode? = null,
    val inputImagesToTransfer: Int? = null,
    val inputMedia: Media? = null,
    val inputOrientationRequested: Orientation? = null,
    val inputQuality: PrintQuality? = null,
    val inputResolution: Resolution? = null,
    val inputScalingHeight: Int? = null,
    val inputScalingWidth: Int? = null,
    val inputScanRegions: List<InputScanRegions>? = null,
    val inputSharpness: Int? = null,
    val inputSides: Sides? = null,
    val inputSource: InputSource? = null,
    val _extras: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    /** Generate attribute list */
    override val attributes: AttributeCollection by lazy {
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
            inputAutoScaling?.also {
                add(Members.inputAutoScaling.of(it))
            }
            inputAutoSkewCorrection?.also {
                add(Members.inputAutoSkewCorrection.of(it))
            }
            inputBrightness?.also {
                add(Members.inputBrightness.of(it))
            }
            inputColorMode?.also {
                add(Members.inputColorMode.of(it))
            }
            inputContentType?.also {
                add(Members.inputContentType.of(it))
            }
            inputContrast?.also {
                add(Members.inputContrast.of(it))
            }
            inputFilmScanMode?.also {
                add(Members.inputFilmScanMode.of(it))
            }
            inputImagesToTransfer?.also {
                add(Members.inputImagesToTransfer.of(it))
            }
            inputMedia?.also {
                add(Members.inputMedia.of(it))
            }
            inputOrientationRequested?.also {
                add(Members.inputOrientationRequested.of(it))
            }
            inputQuality?.also {
                add(Members.inputQuality.of(it))
            }
            inputResolution?.also {
                add(Members.inputResolution.of(it))
            }
            inputScalingHeight?.also {
                add(Members.inputScalingHeight.of(it))
            }
            inputScalingWidth?.also {
                add(Members.inputScalingWidth.of(it))
            }
            inputScanRegions?.also {
                add(Members.inputScanRegions.of(it))
            }
            inputSharpness?.also {
                add(Members.inputSharpness.of(it))
            }
            inputSides?.also {
                add(Members.inputSides.of(it))
            }
            inputSource?.also {
                add(Members.inputSource.of(it))
            }
        } + _extras)
    }

    /** Type for attributes of this collection */
    class Type(name: String): TypedCollectionType<InputAttributes>(Members, name)

    companion object Members : CollectionParser<InputAttributes> {
        override val typeName = InputAttributes::class.java.simpleName!!
        override fun fromAttributes(attributes: List<Attribute<*>>): InputAttributes {
            val remain = attributes.toMutableList()
            return InputAttributes(
                extractOne(remain, inputAutoScaling),
                extractOne(remain, inputAutoSkewCorrection),
                extractOne(remain, inputBrightness),
                extractOne(remain, inputColorMode),
                extractOne(remain, inputContentType),
                extractOne(remain, inputContrast),
                extractOne(remain, inputFilmScanMode),
                extractOne(remain, inputImagesToTransfer),
                extractOne(remain, inputMedia),
                extractOne(remain, inputOrientationRequested),
                extractOne(remain, inputQuality),
                extractOne(remain, inputResolution),
                extractOne(remain, inputScalingHeight),
                extractOne(remain, inputScalingWidth),
                extractAll(remain, inputScanRegions),
                extractOne(remain, inputSharpness),
                extractOne(remain, inputSides),
                extractOne(remain, inputSource),
                _extras = remain)
        }
        /** "input-auto-scaling" member type */
        @JvmField val inputAutoScaling = BooleanType("input-auto-scaling")
        /** "input-auto-skew-correction" member type */
        @JvmField val inputAutoSkewCorrection = BooleanType("input-auto-skew-correction")
        /** "input-brightness" member type */
        @JvmField val inputBrightness = IntegerType("input-brightness")
        /** "input-color-mode" member type */
        @JvmField val inputColorMode = InputColorMode.Type("input-color-mode")
        /** "input-content-type" member type */
        @JvmField val inputContentType = InputContentType.Type("input-content-type")
        /** "input-contrast" member type */
        @JvmField val inputContrast = IntegerType("input-contrast")
        /** "input-film-scan-mode" member type */
        @JvmField val inputFilmScanMode = InputFilmScanMode.Type("input-film-scan-mode")
        /** "input-images-to-transfer" member type */
        @JvmField val inputImagesToTransfer = IntegerType("input-images-to-transfer")
        /** "input-media" member type */
        @JvmField val inputMedia = Media.Type("input-media")
        /** "input-orientation-requested" member type */
        @JvmField val inputOrientationRequested = Orientation.Type("input-orientation-requested")
        /** "input-quality" member type */
        @JvmField val inputQuality = PrintQuality.Type("input-quality")
        /** "input-resolution" member type */
        @JvmField val inputResolution = ResolutionType("input-resolution")
        /** "input-scaling-height" member type */
        @JvmField val inputScalingHeight = IntegerType("input-scaling-height")
        /** "input-scaling-width" member type */
        @JvmField val inputScalingWidth = IntegerType("input-scaling-width")
        /** "input-scan-regions" member type */
        @JvmField val inputScanRegions = InputScanRegions.Type("input-scan-regions")
        /** "input-sharpness" member type */
        @JvmField val inputSharpness = IntegerType("input-sharpness")
        /** "input-sides" member type */
        @JvmField val inputSides = Sides.Type("input-sides")
        /** "input-source" member type */
        @JvmField val inputSource = InputSource.Type("input-source")
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [InputAttributes] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            /** "input-auto-scaling" member type */
            @JvmField val inputAutoScaling = Keywords(Members.inputAutoScaling.name)
            /** "input-auto-skew-correction" member type */
            @JvmField val inputAutoSkewCorrection = Keywords(Members.inputAutoSkewCorrection.name)
            /** "input-brightness" member type */
            @JvmField val inputBrightness = Keywords(Members.inputBrightness.name)
            /** "input-color-mode" member type */
            @JvmField val inputColorMode = Keywords(Members.inputColorMode.name)
            /** "input-content-type" member type */
            @JvmField val inputContentType = Keywords(Members.inputContentType.name)
            /** "input-contrast" member type */
            @JvmField val inputContrast = Keywords(Members.inputContrast.name)
            /** "input-film-scan-mode" member type */
            @JvmField val inputFilmScanMode = Keywords(Members.inputFilmScanMode.name)
            /** "input-images-to-transfer" member type */
            @JvmField val inputImagesToTransfer = Keywords(Members.inputImagesToTransfer.name)
            /** "input-media" member type */
            @JvmField val inputMedia = Keywords(Members.inputMedia.name)
            /** "input-orientation-requested" member type */
            @JvmField val inputOrientationRequested = Keywords(Members.inputOrientationRequested.name)
            /** "input-quality" member type */
            @JvmField val inputQuality = Keywords(Members.inputQuality.name)
            /** "input-resolution" member type */
            @JvmField val inputResolution = Keywords(Members.inputResolution.name)
            /** "input-scaling-height" member type */
            @JvmField val inputScalingHeight = Keywords(Members.inputScalingHeight.name)
            /** "input-scaling-width" member type */
            @JvmField val inputScalingWidth = Keywords(Members.inputScalingWidth.name)
            /** "input-scan-regions" member type */
            @JvmField val inputScanRegions = Keywords(Members.inputScanRegions.name)
            /** "input-sharpness" member type */
            @JvmField val inputSharpness = Keywords(Members.inputSharpness.name)
            /** "input-sides" member type */
            @JvmField val inputSides = Keywords(Members.inputSides.name)
            /** "input-source" member type */
            @JvmField val inputSource = Keywords(Members.inputSource.name)

            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }

    /**
     * Data object corresponding to a "input-scan-regions" collection.
     */
    data class InputScanRegions
    @JvmOverloads constructor(
        val xDimension: Int? = null,
        val xOrigin: Int? = null,
        val yDimension: Int? = null,
        val yOrigin: Int? = null,
        val _extras: List<Attribute<*>> = listOf()
    ) : HasAttributeCollection {
    
        /** Generate attribute list */
        override val attributes: AttributeCollection by lazy {
            AttributeCollection(mutableListOf<Attribute<*>>().apply {
                xDimension?.also {
                    add(Members.xDimension.of(it))
                }
                xOrigin?.also {
                    add(Members.xOrigin.of(it))
                }
                yDimension?.also {
                    add(Members.yDimension.of(it))
                }
                yOrigin?.also {
                    add(Members.yOrigin.of(it))
                }
            } + _extras)
        }
    
        /** Type for attributes of this collection */
        class Type(name: String): TypedCollectionType<InputScanRegions>(Members, name)
    
        companion object Members : CollectionParser<InputScanRegions> {
            override val typeName = InputScanRegions::class.java.simpleName!!
            override fun fromAttributes(attributes: List<Attribute<*>>): InputScanRegions {
                val remain = attributes.toMutableList()
                return InputScanRegions(
                    extractOne(remain, xDimension),
                    extractOne(remain, xOrigin),
                    extractOne(remain, yDimension),
                    extractOne(remain, yOrigin),
                    _extras = remain)
            }
            /** "x-dimension" member type */
            @JvmField val xDimension = IntegerType("x-dimension")
            /** "x-origin" member type */
            @JvmField val xOrigin = IntegerType("x-origin")
            /** "y-dimension" member type */
            @JvmField val yDimension = IntegerType("y-dimension")
            /** "y-origin" member type */
            @JvmField val yOrigin = IntegerType("y-origin")
        }
    
        /**
         * All allowed member names in keyword form.
         */
        data class Keywords(
            override val value: String
        ) : Keyword() {
            override fun toString() = value
            /** An attribute type for [InputScanRegions] member names as keywords */
            class Type(name: String) : KeywordType<Keywords>(Encoder, name)
    
            companion object {
                /** "x-dimension" member type */
                @JvmField val xDimension = Keywords(Members.xDimension.name)
                /** "x-origin" member type */
                @JvmField val xOrigin = Keywords(Members.xOrigin.name)
                /** "y-dimension" member type */
                @JvmField val yDimension = Keywords(Members.yDimension.name)
                /** "y-origin" member type */
                @JvmField val yOrigin = Keywords(Members.yOrigin.name)
    
                @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                    Keywords(value)
                }
            }
        }
    }
}