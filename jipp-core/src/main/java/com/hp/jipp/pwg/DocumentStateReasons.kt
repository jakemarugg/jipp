// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.Keyword
import com.hp.jipp.encoding.KeywordType

/**
 * "document-state-reasons" keyword as defined in:
 *   * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
 *   * [PWG5100.18](http://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf)
 *   * [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf)
 */
data class DocumentStateReasons(
    override val value: String
) : Keyword() {

    override fun toString() = value

    /** An attribute type for [DocumentStateReasons] attributes */
    class Type(name: String) : KeywordType<DocumentStateReasons>(Encoder, name)

    companion object {
        @JvmField val abortedBySystem = DocumentStateReasons("aborted-by-system")
        @JvmField val canceledAtDevice = DocumentStateReasons("canceled-at-device")
        @JvmField val canceledByOperator = DocumentStateReasons("canceled-by-operator")
        @JvmField val canceledByUser = DocumentStateReasons("canceled-by-user")
        @JvmField val completedSuccessfully = DocumentStateReasons("completed-successfully")
        @JvmField val completedWithErrors = DocumentStateReasons("completed-with-errors")
        @JvmField val completedWithWarnings = DocumentStateReasons("completed-with-warnings")
        @JvmField val compressionError = DocumentStateReasons("compression-error")
        @JvmField val dataInsufficient = DocumentStateReasons("data-insufficient")
        @JvmField val digitalSignatureDidNotVerify = DocumentStateReasons("digital-signature-did-not-verify")
        @JvmField val digitalSignatureTypeNotSupported = DocumentStateReasons("digital-signature-type-not-supported")
        @JvmField val digitalSignatureWait = DocumentStateReasons("digital-signature-wait")
        @JvmField val documentAccessError = DocumentStateReasons("document-access-error")
        @JvmField val documentFetchable = DocumentStateReasons("document-fetchable")
        @JvmField val documentFormatError = DocumentStateReasons("document-format-error")
        @JvmField val documentPasswordError = DocumentStateReasons("document-password-error")
        @JvmField val documentPermissionError = DocumentStateReasons("document-permission-error")
        @JvmField val documentSecurityError = DocumentStateReasons("document-security-error")
        @JvmField val documentUnprintableError = DocumentStateReasons("document-unprintable-error")
        @JvmField val errorsDetected = DocumentStateReasons("errors-detected")
        @JvmField val incoming = DocumentStateReasons("incoming")
        @JvmField val interpreting = DocumentStateReasons("interpreting")
        @JvmField val none = DocumentStateReasons("none")
        @JvmField val outgoing = DocumentStateReasons("outgoing")
        @JvmField val printing = DocumentStateReasons("printing")
        @JvmField val processingToStopPoint = DocumentStateReasons("processing-to-stop-point")
        @JvmField val queued = DocumentStateReasons("queued")
        @JvmField val queuedForMarker = DocumentStateReasons("queued-for-marker")
        @JvmField val queuedInDevice = DocumentStateReasons("queued-in-device")
        @JvmField val resourcesAreNotReady = DocumentStateReasons("resources-are-not-ready")
        @JvmField val resourcesAreNotSupported = DocumentStateReasons("resources-are-not-supported")
        @JvmField val submissionInterrupted = DocumentStateReasons("submission-interrupted")
        @JvmField val transforming = DocumentStateReasons("transforming")
        @JvmField val unsupportedCompression = DocumentStateReasons("unsupported-compression")
        @JvmField val unsupportedDocumentFormat = DocumentStateReasons("unsupported-document-format")
        @JvmField val warningsDetected = DocumentStateReasons("warnings-detected")
        @JvmField val Encoder = KeywordType.encoderOf(DocumentStateReasons::class.java) { value, _, _ ->
            DocumentStateReasons(value)
        }
    }
}
