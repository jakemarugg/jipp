// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "print-accuracy" collection as defined in:
 * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PrintAccuracy
@JvmOverloads constructor(
    val accuracyUnits: AccuracyUnit? = null,
    val xAccuracy: Int? = null,
    val yAccuracy: Int? = null,
    val zAccuracy: Int? = null,
    val _extras: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    /** Generate attribute list */
    override val attributes: AttributeCollection by lazy {
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
            accuracyUnits?.also {
                add(Members.accuracyUnits.of(it))
            }
            xAccuracy?.also {
                add(Members.xAccuracy.of(it))
            }
            yAccuracy?.also {
                add(Members.yAccuracy.of(it))
            }
            zAccuracy?.also {
                add(Members.zAccuracy.of(it))
            }
        } + _extras)
    }

    /** Type for attributes of this collection */
    class Type(name: String): TypedCollectionType<PrintAccuracy>(Members, name)

    companion object Members : CollectionParser<PrintAccuracy> {
        override val typeName = PrintAccuracy::class.java.simpleName!!
        override fun fromAttributes(attributes: List<Attribute<*>>): PrintAccuracy {
            val remain = attributes.toMutableList()
            return PrintAccuracy(
                extractOne(remain, accuracyUnits),
                extractOne(remain, xAccuracy),
                extractOne(remain, yAccuracy),
                extractOne(remain, zAccuracy),
                _extras = remain)
        }
        /** "accuracy-units" member type */
        @JvmField val accuracyUnits = AccuracyUnit.Type("accuracy-units")
        /** "x-accuracy" member type */
        @JvmField val xAccuracy = IntegerType("x-accuracy")
        /** "y-accuracy" member type */
        @JvmField val yAccuracy = IntegerType("y-accuracy")
        /** "z-accuracy" member type */
        @JvmField val zAccuracy = IntegerType("z-accuracy")
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [PrintAccuracy] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            /** "accuracy-units" member type */
            @JvmField val accuracyUnits = Keywords(Members.accuracyUnits.name)
            /** "x-accuracy" member type */
            @JvmField val xAccuracy = Keywords(Members.xAccuracy.name)
            /** "y-accuracy" member type */
            @JvmField val yAccuracy = Keywords(Members.yAccuracy.name)
            /** "z-accuracy" member type */
            @JvmField val zAccuracy = Keywords(Members.zAccuracy.name)

            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }
}
