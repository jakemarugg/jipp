// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "document-format-details" collection as defined in:
 *   * [PWG5100.7](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobext10-20031031-5100.7.pdf)
 */
data class DocumentFormatDetails
@JvmOverloads constructor(
    val documentFormat: String? = null,
    val documentFormatDeviceId: String? = null,
    val documentFormatVersion: String? = null,
    val documentNaturalLanguage: List<String>? = null,
    val documentSourceApplicationName: String? = null,
    val documentSourceApplicationVersion: String? = null,
    val documentSourceOsName: String? = null,
    val documentSourceOsVersion: String? = null,
    val _extras: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    /** Generate attribute list */
    override val attributes: AttributeCollection by lazy {
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
            documentFormat?.also {
                add(Members.documentFormat.of(it))
            }
            documentFormatDeviceId?.also {
                add(Members.documentFormatDeviceId.of(it))
            }
            documentFormatVersion?.also {
                add(Members.documentFormatVersion.of(it))
            }
            documentNaturalLanguage?.also {
                add(Members.documentNaturalLanguage.of(it))
            }
            documentSourceApplicationName?.also {
                add(Members.documentSourceApplicationName.of(it))
            }
            documentSourceApplicationVersion?.also {
                add(Members.documentSourceApplicationVersion.of(it))
            }
            documentSourceOsName?.also {
                add(Members.documentSourceOsName.of(it))
            }
            documentSourceOsVersion?.also {
                add(Members.documentSourceOsVersion.of(it))
            }
        } + _extras)
    }

    /** Type for attributes of this collection */
    class Type(name: String): TypedCollectionType<DocumentFormatDetails>(Members, name)

    companion object Members : CollectionParser<DocumentFormatDetails> {
        override val typeName = DocumentFormatDetails::class.java.simpleName!!
        override fun fromAttributes(attributes: List<Attribute<*>>): DocumentFormatDetails {
            val remain = attributes.toMutableList()
            return DocumentFormatDetails(
                extractOne(remain, documentFormat),
                extractOne(remain, documentFormatDeviceId)?.value,
                extractOne(remain, documentFormatVersion)?.value,
                extractAll(remain, documentNaturalLanguage),
                extractOne(remain, documentSourceApplicationName)?.value,
                extractOne(remain, documentSourceApplicationVersion)?.value,
                extractOne(remain, documentSourceOsName)?.value,
                extractOne(remain, documentSourceOsVersion)?.value,
                _extras = remain)
        }
        /** "document-format" member type */
        @JvmField val documentFormat = StringType(Tag.mimeMediaType, "document-format")
        /** "document-format-device-id" member type */
        @JvmField val documentFormatDeviceId = TextType(127, "document-format-device-id")
        /** "document-format-version" member type */
        @JvmField val documentFormatVersion = TextType(127, "document-format-version")
        /** "document-natural-language" member type */
        @JvmField val documentNaturalLanguage = StringType(Tag.naturalLanguage, "document-natural-language")
        /** "document-source-application-name" member type */
        @JvmField val documentSourceApplicationName = NameType("document-source-application-name")
        /** "document-source-application-version" member type */
        @JvmField val documentSourceApplicationVersion = TextType(127, "document-source-application-version")
        /** "document-source-os-name" member type */
        @JvmField val documentSourceOsName = NameType(40, "document-source-os-name")
        /** "document-source-os-version" member type */
        @JvmField val documentSourceOsVersion = TextType(40, "document-source-os-version")
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [DocumentFormatDetails] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            /** "document-format" member type */
            @JvmField val documentFormat = Keywords(Members.documentFormat.name)
            /** "document-format-device-id" member type */
            @JvmField val documentFormatDeviceId = Keywords(Members.documentFormatDeviceId.name)
            /** "document-format-version" member type */
            @JvmField val documentFormatVersion = Keywords(Members.documentFormatVersion.name)
            /** "document-natural-language" member type */
            @JvmField val documentNaturalLanguage = Keywords(Members.documentNaturalLanguage.name)
            /** "document-source-application-name" member type */
            @JvmField val documentSourceApplicationName = Keywords(Members.documentSourceApplicationName.name)
            /** "document-source-application-version" member type */
            @JvmField val documentSourceApplicationVersion = Keywords(Members.documentSourceApplicationVersion.name)
            /** "document-source-os-name" member type */
            @JvmField val documentSourceOsName = Keywords(Members.documentSourceOsName.name)
            /** "document-source-os-version" member type */
            @JvmField val documentSourceOsVersion = Keywords(Members.documentSourceOsVersion.name)

            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }
}