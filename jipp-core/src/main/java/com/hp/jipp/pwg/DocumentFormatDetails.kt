// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Frontis....
 */
data class DocumentFormatDetails
@JvmOverloads constructor(
    val documentFormat: String? = null,
    val documentFormatDeviceId: String? = null,
    val documentFormatVersion: String? = null,
    val documentNaturalLanguage: List<String>? = null,
    val documentSourceApplicationName: String? = null,
    val documentSourceApplicationVersion: String? = null,
    val documentSourceOsName: String? = null,
    val documentSourceOsVersion: String? = null,
    val allAttributes: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    override val attributes: AttributeCollection by lazy {
        // TODO: Needs to be distinct, and all may ALSO contain them -- so merge like attributes.
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
            documentFormat?.also {
                add(Members.documentFormat.of(it))
            }
            documentFormatDeviceId?.also {
                add(Members.documentFormatDeviceId.of(it))
            }
            documentFormatVersion?.also {
                add(Members.documentFormatVersion.of(it))
            }
            documentNaturalLanguage?.also {
                add(Members.documentNaturalLanguage.of(it))
            }
            documentSourceApplicationName?.also {
                add(Members.documentSourceApplicationName.of(it))
            }
            documentSourceApplicationVersion?.also {
                add(Members.documentSourceApplicationVersion.of(it))
            }
            documentSourceOsName?.also {
                add(Members.documentSourceOsName.of(it))
            }
            documentSourceOsVersion?.also {
                add(Members.documentSourceOsVersion.of(it))
            }
        } + allAttributes)
    }

    /**
     * Member types and conversions for this collection type.
     */
    companion object Members : CollectionParser<DocumentFormatDetails> {
        override val typeName = DocumentFormatDetails::class.java.simpleName!!

        /** Create a [DocumentFormatDetails] object from supplied attributes */
        override fun fromAttributes(attributes: List<Attribute<*>>): DocumentFormatDetails {
            val remain = attributes.toMutableList()
            return DocumentFormatDetails(
                extractOne(remain, documentFormat),
                extractOne(remain, documentFormatDeviceId)?.value,
                extractOne(remain, documentFormatVersion)?.value,
                extractAll(remain, documentNaturalLanguage), // Note: different for 1setof member
                extractOne(remain, documentSourceApplicationName)?.value,
                extractOne(remain, documentSourceApplicationVersion)?.value,
                extractOne(remain, documentSourceOsName)?.value, // Note: Text, Name need add'l conversion
                extractOne(remain, documentSourceOsVersion)?.value,
                allAttributes = remain)
        }

        /** "document-format" member */
        @JvmField val documentFormat = StringType(Tag.mimeMediaType, "document-format")

        /** "document-format-device-id" member */
        @JvmField val documentFormatDeviceId = TextType(127, "document-format-device-id")

        /** "document-format-version" member */
        @JvmField val documentFormatVersion = TextType(127, "document-format-version")

        /** "document-natural-language" member */
        @JvmField val documentNaturalLanguage = StringType(Tag.naturalLanguage, "document-natural-language")

        /** "document-source-application-name" member */
        @JvmField val documentSourceApplicationName = NameType("document-source-application-name")

        /** "document-source-application-version" member */
        @JvmField val documentSourceApplicationVersion = TextType(127, "document-source-application-version")

        /** "document-source-os-name" member */
        @JvmField val documentSourceOsName = NameType(40, "document-source-os-name")

        /** "document-source-os-version" member */
        @JvmField val documentSourceOsVersion = TextType(40, "document-source-os-version")
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [DocumentFormatDetails] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            @JvmField val documentFormat = Keywords(Members.documentSourceApplicationName.name)
            @JvmField val documentFormatDeviceId = Keywords(Members.documentSourceApplicationName.name)
            @JvmField val documentFormatVersion = Keywords(Members.documentSourceApplicationName.name)
            @JvmField val documentNaturalLanguage = Keywords(Members.documentSourceApplicationName.name)
            @JvmField val documentSourceApplicationName = Keywords(Members.documentSourceApplicationName.name)
            @JvmField val documentSourceApplicationVersion = Keywords(Members.documentSourceApplicationVersion.name)
            @JvmField val documentSourceOsName = Keywords(Members.documentSourceOsName.name)
            @JvmField val documentSourceOsVersion = Keywords(Members.documentSourceApplicationName.name)
            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }

    /**
     * Builder for [DocumentFormatDetails] objects.
     */
    class Builder() {
        private var documentFormat: String? = null
        private var documentFormatDeviceId: String? = null
        private var documentFormatVersion: String? = null
        private var documentNaturalLanguage: List<String>? = null
        private var documentSourceApplicationName: String? = null
        private var documentSourceApplicationVersion: String? = null
        private var documentSourceOsName: String? = null
        private var documentSourceOsVersion: String? = null
        private var allAttributes: List<Attribute<*>> = listOf()

        /** Create a [Builder] from an instance of the type */
        constructor(other: DocumentFormatDetails) : this() {
            documentFormat = other.documentFormat
            documentFormatDeviceId = other.documentFormatDeviceId
            documentFormatVersion = other.documentFormatVersion
            documentNaturalLanguage = other.documentNaturalLanguage
            documentSourceApplicationName = other.documentSourceApplicationName
            documentSourceApplicationVersion = other.documentSourceApplicationVersion
            documentSourceOsName = other.documentSourceOsName
            documentSourceOsVersion = other.documentSourceOsVersion
            allAttributes = other.allAttributes
        }

        fun documentFormat(value: String) = apply { documentFormat = value }
        fun documentFormatDeviceId(value: String) = apply { documentFormatDeviceId = value }
        fun documentFormatVersion(value: String) = apply { documentFormatVersion = value }
        fun documentNaturalLanguage(value: List<String>) = apply { documentNaturalLanguage = value }
        fun documentSourceApplicationName(value: String) = apply { documentSourceApplicationName = value }
        fun documentSourceApplicationVersion(value: String) = apply { documentSourceApplicationVersion = value }
        fun documentSourceOsVersion(value: String) = apply { documentSourceOsVersion = value }
        fun documentSourceOsName(value: String) = apply { documentSourceOsName = value }
        fun allAttributes(value: List<Attribute<*>>) = apply { allAttributes = value }

        fun build() = DocumentFormatDetails(
            documentFormat,
            documentFormatDeviceId,
            documentFormatVersion,
            documentNaturalLanguage,
            documentSourceApplicationName,
            documentSourceApplicationVersion,
            documentSourceOsName,
            documentSourceOsVersion,
            allAttributes)
    }
}
