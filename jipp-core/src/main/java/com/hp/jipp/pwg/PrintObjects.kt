// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "print-objects" collection as defined in:
 * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PrintObjects
@JvmOverloads constructor(
    val documentNumber: Int? = null,
    val objectOffset: ObjectOffset? = null,
    val objectSize: ObjectSize? = null,
    val objectUuid: java.net.URI? = null,
    val _extras: List<Attribute<*>> = listOf()
) : HasAttributeCollection {

    /** Generate attribute list */
    override val attributes: AttributeCollection by lazy {
        AttributeCollection(mutableListOf<Attribute<*>>().apply {
            documentNumber?.also {
                add(Members.documentNumber.of(it))
            }
            objectOffset?.also {
                add(Members.objectOffset.of(it))
            }
            objectSize?.also {
                add(Members.objectSize.of(it))
            }
            objectUuid?.also {
                add(Members.objectUuid.of(it))
            }
        } + _extras)
    }

    /** Type for attributes of this collection */
    class Type(name: String): TypedCollectionType<PrintObjects>(Members, name)

    companion object Members : CollectionParser<PrintObjects> {
        override val typeName = PrintObjects::class.java.simpleName!!
        override fun fromAttributes(attributes: List<Attribute<*>>): PrintObjects {
            val remain = attributes.toMutableList()
            return PrintObjects(
                extractOne(remain, documentNumber),
                extractOne(remain, objectOffset),
                extractOne(remain, objectSize),
                extractOne(remain, objectUuid),
                _extras = remain)
        }
        /** "document-number" member type */
        @JvmField val documentNumber = IntegerType("document-number")
        /** "object-offset" member type */
        @JvmField val objectOffset = ObjectOffset.Type("object-offset")
        /** "object-size" member type */
        @JvmField val objectSize = ObjectSize.Type("object-size")
        /** "object-uuid" member type */
        @JvmField val objectUuid = UriType("object-uuid")
    }

    /**
     * All allowed member names in keyword form.
     */
    data class Keywords(
        override val value: String
    ) : Keyword() {
        override fun toString() = value
        /** An attribute type for [PrintObjects] member names as keywords */
        class Type(name: String) : KeywordType<Keywords>(Encoder, name)

        companion object {
            /** "document-number" member type */
            @JvmField val documentNumber = Keywords(Members.documentNumber.name)
            /** "object-offset" member type */
            @JvmField val objectOffset = Keywords(Members.objectOffset.name)
            /** "object-size" member type */
            @JvmField val objectSize = Keywords(Members.objectSize.name)
            /** "object-uuid" member type */
            @JvmField val objectUuid = Keywords(Members.objectUuid.name)

            @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                Keywords(value)
            }
        }
    }

    /**
     * Data object corresponding to a "object-offset" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class ObjectOffset
    @JvmOverloads constructor(
        val xOffset: Int? = null,
        val yOffset: Int? = null,
        val zOffset: Int? = null,
        val _extras: List<Attribute<*>> = listOf()
    ) : HasAttributeCollection {
    
        /** Generate attribute list */
        override val attributes: AttributeCollection by lazy {
            AttributeCollection(mutableListOf<Attribute<*>>().apply {
                xOffset?.also {
                    add(Members.xOffset.of(it))
                }
                yOffset?.also {
                    add(Members.yOffset.of(it))
                }
                zOffset?.also {
                    add(Members.zOffset.of(it))
                }
            } + _extras)
        }
    
        /** Type for attributes of this collection */
        class Type(name: String): TypedCollectionType<ObjectOffset>(Members, name)
    
        companion object Members : CollectionParser<ObjectOffset> {
            override val typeName = ObjectOffset::class.java.simpleName!!
            override fun fromAttributes(attributes: List<Attribute<*>>): ObjectOffset {
                val remain = attributes.toMutableList()
                return ObjectOffset(
                    extractOne(remain, xOffset),
                    extractOne(remain, yOffset),
                    extractOne(remain, zOffset),
                    _extras = remain)
            }
            /** "x-offset" member type */
            @JvmField val xOffset = IntegerType("x-offset")
            /** "y-offset" member type */
            @JvmField val yOffset = IntegerType("y-offset")
            /** "z-offset" member type */
            @JvmField val zOffset = IntegerType("z-offset")
        }
    
        /**
         * All allowed member names in keyword form.
         */
        data class Keywords(
            override val value: String
        ) : Keyword() {
            override fun toString() = value
            /** An attribute type for [ObjectOffset] member names as keywords */
            class Type(name: String) : KeywordType<Keywords>(Encoder, name)
    
            companion object {
                /** "x-offset" member type */
                @JvmField val xOffset = Keywords(Members.xOffset.name)
                /** "y-offset" member type */
                @JvmField val yOffset = Keywords(Members.yOffset.name)
                /** "z-offset" member type */
                @JvmField val zOffset = Keywords(Members.zOffset.name)
    
                @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                    Keywords(value)
                }
            }
        }
    }

    /**
     * Data object corresponding to a "object-size" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class ObjectSize
    @JvmOverloads constructor(
        val xDimension: Int? = null,
        val yDimension: Int? = null,
        val zDimension: Int? = null,
        val _extras: List<Attribute<*>> = listOf()
    ) : HasAttributeCollection {
    
        /** Generate attribute list */
        override val attributes: AttributeCollection by lazy {
            AttributeCollection(mutableListOf<Attribute<*>>().apply {
                xDimension?.also {
                    add(Members.xDimension.of(it))
                }
                yDimension?.also {
                    add(Members.yDimension.of(it))
                }
                zDimension?.also {
                    add(Members.zDimension.of(it))
                }
            } + _extras)
        }
    
        /** Type for attributes of this collection */
        class Type(name: String): TypedCollectionType<ObjectSize>(Members, name)
    
        companion object Members : CollectionParser<ObjectSize> {
            override val typeName = ObjectSize::class.java.simpleName!!
            override fun fromAttributes(attributes: List<Attribute<*>>): ObjectSize {
                val remain = attributes.toMutableList()
                return ObjectSize(
                    extractOne(remain, xDimension),
                    extractOne(remain, yDimension),
                    extractOne(remain, zDimension),
                    _extras = remain)
            }
            /** "x-dimension" member type */
            @JvmField val xDimension = IntegerType("x-dimension")
            /** "y-dimension" member type */
            @JvmField val yDimension = IntegerType("y-dimension")
            /** "z-dimension" member type */
            @JvmField val zDimension = IntegerType("z-dimension")
        }
    
        /**
         * All allowed member names in keyword form.
         */
        data class Keywords(
            override val value: String
        ) : Keyword() {
            override fun toString() = value
            /** An attribute type for [ObjectSize] member names as keywords */
            class Type(name: String) : KeywordType<Keywords>(Encoder, name)
    
            companion object {
                /** "x-dimension" member type */
                @JvmField val xDimension = Keywords(Members.xDimension.name)
                /** "y-dimension" member type */
                @JvmField val yDimension = Keywords(Members.yDimension.name)
                /** "z-dimension" member type */
                @JvmField val zDimension = Keywords(Members.zDimension.name)
    
                @JvmField val Encoder = KeywordType.encoderOf(Keywords::class.java) { value, _, _ ->
                    Keywords(value)
                }
            }
        }
    }
}
