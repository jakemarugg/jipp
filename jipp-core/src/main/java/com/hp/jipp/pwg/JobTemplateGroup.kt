// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports
import com.hp.jipp.util.getStaticObjects

/**
 * Attribute types for the Job Template group.
 */
object JobTemplateGroup {

    /**
     * "confirmation-sheet-print" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     */
    @JvmField val confirmationSheetPrint = BooleanType("confirmation-sheet-print")

    /**
     * "copies" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val copies = IntegerType("copies")

    /**
     * "cover-back" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val coverBack = CollectionType("cover-back")

    /**
     * "cover-front" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val coverFront = CollectionType("cover-front")

    /**
     * "cover-sheet-info" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     */
    @JvmField val coverSheetInfo = CollectionType("cover-sheet-info")

    /**
     * "destination-statuses" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     */
    @JvmField val destinationStatuses = CollectionType("destination-statuses")

    /**
     * "destination-uris" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf)
     */
    @JvmField val destinationUris = CollectionType("destination-uris")

    /**
     * "feed-orientation" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val feedOrientation = FeedOrientation.Type("feed-orientation")

    /**
     * "finishings" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val finishings = Finishing.Type("finishings")

    /**
     * "finishings-col" as defined in:
     * [PWG5100.1](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfinishings10-20010205-5100.1.pdf)
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val finishingsCol = CollectionType("finishings-col")

    /**
     * "font-size-requested" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val fontSizeRequested = IntegerType("font-size-requested")

    /**
     * "force-front-side" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val forceFrontSide = IntegerType("force-front-side")

    /**
     * "imposition-template" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val impositionTemplate = ImpositionTemplate.Type("imposition-template")

    /**
     * "insert-sheet" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val insertSheet = CollectionType("insert-sheet")

    /**
     * "job-account-type" as defined in:
     * [PWG5100.16](http://ftp.pwg.org/pub/pwg/candidates/cs-ipptrans10-20131108-5100.16.pdf)
     */
    @JvmField val jobAccountType = JobAccountType.Type("job-account-type")

    /**
     * "job-accounting-sheets" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val jobAccountingSheets = CollectionType("job-accounting-sheets")

    /**
     * "job-copies" as defined in:
     * [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf)
     */
    @JvmField val jobCopies = IntegerType("job-copies")

    /**
     * "job-cover-back" as defined in:
     * [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf)
     */
    @JvmField val jobCoverBack = CollectionType("job-cover-back")

    /**
     * "job-cover-front" as defined in:
     * [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf)
     */
    @JvmField val jobCoverFront = CollectionType("job-cover-front")

    /**
     * "job-delay-output-until" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val jobDelayOutputUntil = JobDelayOutputUntil.Type("job-delay-output-until")

    /**
     * "job-error-action" as defined in:
     * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
     */
    @JvmField val jobErrorAction = JobErrorAction.Type("job-error-action")

    /**
     * "job-error-sheet" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val jobErrorSheet = CollectionType("job-error-sheet")

    /**
     * "job-finishings" as defined in:
     * [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf)
     */
    @JvmField val jobFinishings = Finishing.Type("job-finishings")

    /**
     * "job-finishings-col" as defined in:
     * [PWG5100.5](http://ftp.pwg.org/pub/pwg/candidates/cs-ippdocobject10-20031031-5100.5.pdf)
     */
    @JvmField val jobFinishingsCol = CollectionType("job-finishings-col")

    /**
     * "job-hold-until" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val jobHoldUntil = JobHoldUntil.Type("job-hold-until")

    /**
     * "job-pages-per-set" as defined in:
     * [PWG5100.1](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfinishings10-20010205-5100.1.pdf)
     */
    @JvmField val jobPagesPerSet = IntegerType("job-pages-per-set")

    /**
     * "job-phone-number" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val jobPhoneNumber = UriType("job-phone-number")

    /**
     * "job-priority" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val jobPriority = IntegerType("job-priority")

    /**
     * "job-save-disposition" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val jobSaveDisposition = CollectionType("job-save-disposition")

    /**
     * "job-sheets" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val jobSheets = JobSheet.Type("job-sheets")

    /**
     * "job-sheets-col" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val jobSheetsCol = CollectionType("job-sheets-col")

    /**
     * "materials-col" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val materialsCol = CollectionType("materials-col")

    /**
     * "media" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val media = Media.Type("media")

    /**
     * "media-col" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val mediaCol = CollectionType("media-col")

    /**
     * "multiple-document-handling" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val multipleDocumentHandling = MultipleDocumentHandling.Type("multiple-document-handling")

    /**
     * "multiple-object-handling" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val multipleObjectHandling = MultipleObjectHandling.Type("multiple-object-handling")

    /**
     * "number-of-retries" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     */
    @JvmField val numberOfRetries = IntegerType("number-of-retries")

    /**
     * "number-up" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val numberUp = IntegerType("number-up")

    /**
     * "orientation-requested" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val orientationRequested = Orientation.Type("orientation-requested")

    /**
     * "output-bin" as defined in:
     * [PWG5100.2](http://ftp.pwg.org/pub/pwg/candidates/cs-ippoutputbin10-20010207-5100.2.pdf)
     */
    @JvmField val outputBin = OutputBin.Type("output-bin")

    /**
     * "page-delivery" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val pageDelivery = PageDelivery.Type("page-delivery")

    /**
     * "page-order-received" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val pageOrderReceived = PageOrderReceived.Type("page-order-received")

    /**
     * "page-ranges" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val pageRanges = RangeOfIntegerType("page-ranges")

    /**
     * "pages-per-subset" as defined in:
     * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
     */
    @JvmField val pagesPerSubset = IntegerType("pages-per-subset")

    /**
     * "pdl-init-file" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val pdlInitFile = CollectionType("pdl-init-file")

    /**
     * "platform-temperature" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val platformTemperature = IntegerType("platform-temperature")

    /**
     * "presentation-direction-number-up" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val presentationDirectionNumberUp = PresentationDirectionNumberUp.Type("presentation-direction-number-up")

    /**
     * "print-accuracy" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val printAccuracy = CollectionType("print-accuracy")

    /**
     * "print-base" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val printBase = PrintBase.Type("print-base")

    /**
     * "print-color-mode" as defined in:
     * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
     */
    @JvmField val printColorMode = PrintColorMode.Type("print-color-mode")

    /**
     * "print-content-optimize" as defined in:
     * [PWG5100.7](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobext10-20031031-5100.7.pdf)
     */
    @JvmField val printContentOptimize = PrintContentOptimize.Type("print-content-optimize")

    /**
     * "print-objects" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val printObjects = CollectionType("print-objects")

    /**
     * "print-quality" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val printQuality = PrintQuality.Type("print-quality")

    /**
     * "print-rendering-intent" as defined in:
     * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
     */
    @JvmField val printRenderingIntent = PrintRenderingIntent.Type("print-rendering-intent")

    /**
     * "print-scaling" as defined in:
     * [PWG5100.16](http://ftp.pwg.org/pub/pwg/candidates/cs-ipptrans10-20131108-5100.16.pdf)
     */
    @JvmField val printScaling = PrintScaling.Type("print-scaling")

    /**
     * "print-supports" as defined in:
     * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
     */
    @JvmField val printSupports = PrintSupports.Type("print-supports")

    /**
     * "printer-resolution" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val printerResolution = ResolutionType("printer-resolution")

    /**
     * "proof-print" as defined in:
     * [PWG5100.11](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext10-20101030-5100.11.pdf)
     */
    @JvmField val proofPrint = CollectionType("proof-print")

    /**
     * "retry-interval" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     */
    @JvmField val retryInterval = IntegerType("retry-interval")

    /**
     * "retry-time-out" as defined in:
     * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf)
     */
    @JvmField val retryTimeOut = IntegerType("retry-time-out")

    /**
     * "separator-sheets" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val separatorSheets = CollectionType("separator-sheets")

    /**
     * "sheet-collate" as defined in:
     * [RFC3381](http://www.iana.org/go/rfc3381)
     */
    @JvmField val sheetCollate = SheetCollate.Type("sheet-collate")

    /**
     * "sides" as defined in:
     * [RFC8011](http://www.iana.org/go/rfc8011)
     */
    @JvmField val sides = Sides.Type("sides")

    /**
     * "x-image-position" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val xImagePosition = XImagePosition.Type("x-image-position")

    /**
     * "x-image-shift" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val xImageShift = IntegerType("x-image-shift")

    /**
     * "x-side1-image-shift" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val xSide1ImageShift = IntegerType("x-side1-image-shift")

    /**
     * "x-side2-image-shift" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val xSide2ImageShift = IntegerType("x-side2-image-shift")

    /**
     * "y-image-position" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val yImagePosition = YImagePosition.Type("y-image-position")

    /**
     * "y-image-shift" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val yImageShift = IntegerType("y-image-shift")

    /**
     * "y-side1-image-shift" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val ySide1ImageShift = IntegerType("y-side1-image-shift")

    /**
     * "y-side2-image-shift" as defined in:
     * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf)
     */
    @JvmField val ySide2ImageShift = IntegerType("y-side2-image-shift")

    /** All known attributes */
    @JvmField
    val all = JobTemplateGroup::class.java.getStaticObjects()
            .filter { it is AttributeType<*> }
            .map { it as AttributeType<*> }
}