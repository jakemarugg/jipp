// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.Keyword
import com.hp.jipp.encoding.KeywordType

/**
 * "printer-state-reasons" keyword as defined in:
 *   * [HPINC20180215](http://www.pwg.org/pipermail/ipp/2018/019504.html)
 *   * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf)
 *   * [PWG5100.18](http://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf)
 *   * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf)
 *   * [PWG5100.9](http://ftp.pwg.org/pub/pwg/candidates/cs-ippstate10-20090731-5100.9.pdf)
 *   * [RFC3998](http://www.iana.org/go/rfc3998)
 *   * [RFC8011](http://www.iana.org/go/rfc8011)
 */
data class PrinterStateReasons(
    override val value: String
) : Keyword() {

    override fun toString() = value

    /** An attribute type for [PrinterStateReasons] attributes */
    class Type(name: String) : KeywordType<PrinterStateReasons>(Encoder, name)

    companion object {
        @JvmField val alertRemovalOfBinaryChangeEntry = PrinterStateReasons("alert-removal-of-binary-change-entry")
        @JvmField val banderAdded = PrinterStateReasons("bander-added")
        @JvmField val banderAlmostEmpty = PrinterStateReasons("bander-almost-empty")
        @JvmField val banderAlmostFull = PrinterStateReasons("bander-almost-full")
        @JvmField val banderAtLimit = PrinterStateReasons("bander-at-limit")
        @JvmField val banderClosed = PrinterStateReasons("bander-closed")
        @JvmField val banderConfigurationChange = PrinterStateReasons("bander-configuration-change")
        @JvmField val banderCoverClosed = PrinterStateReasons("bander-cover-closed")
        @JvmField val banderCoverOpen = PrinterStateReasons("bander-cover-open")
        @JvmField val banderEmpty = PrinterStateReasons("bander-empty")
        @JvmField val banderFull = PrinterStateReasons("bander-full")
        @JvmField val banderInterlockClosed = PrinterStateReasons("bander-interlock-closed")
        @JvmField val banderInterlockOpen = PrinterStateReasons("bander-interlock-open")
        @JvmField val banderJam = PrinterStateReasons("bander-jam")
        @JvmField val banderLifeAlmostOver = PrinterStateReasons("bander-life-almost-over")
        @JvmField val banderLifeOver = PrinterStateReasons("bander-life-over")
        @JvmField val banderMemoryExhausted = PrinterStateReasons("bander-memory-exhausted")
        @JvmField val banderMissing = PrinterStateReasons("bander-missing")
        @JvmField val banderMotorFailure = PrinterStateReasons("bander-motor-failure")
        @JvmField val banderNearLimit = PrinterStateReasons("bander-near-limit")
        @JvmField val banderOffline = PrinterStateReasons("bander-offline")
        @JvmField val banderOpened = PrinterStateReasons("bander-opened")
        @JvmField val banderOverTemperature = PrinterStateReasons("bander-over-temperature")
        @JvmField val banderPowerSaver = PrinterStateReasons("bander-power-saver")
        @JvmField val banderRecoverableFailure = PrinterStateReasons("bander-recoverable-failure")
        @JvmField val banderRecoverableStorage = PrinterStateReasons("bander-recoverable-storage")
        @JvmField val banderRemoved = PrinterStateReasons("bander-removed")
        @JvmField val banderResourceAdded = PrinterStateReasons("bander-resource-added")
        @JvmField val banderResourceRemoved = PrinterStateReasons("bander-resource-removed")
        @JvmField val banderThermistorFailure = PrinterStateReasons("bander-thermistor-failure")
        @JvmField val banderTimingFailure = PrinterStateReasons("bander-timing-failure")
        @JvmField val banderTurnedOff = PrinterStateReasons("bander-turned-off")
        @JvmField val banderTurnedOn = PrinterStateReasons("bander-turned-on")
        @JvmField val banderUnderTemperature = PrinterStateReasons("bander-under-temperature")
        @JvmField val banderUnrecoverableFailure = PrinterStateReasons("bander-unrecoverable-failure")
        @JvmField val banderUnrecoverableStorageError = PrinterStateReasons("bander-unrecoverable-storage-error")
        @JvmField val banderWarmingUp = PrinterStateReasons("bander-warming-up")
        @JvmField val binderAdded = PrinterStateReasons("binder-added")
        @JvmField val binderAlmostEmpty = PrinterStateReasons("binder-almost-empty")
        @JvmField val binderAlmostFull = PrinterStateReasons("binder-almost-full")
        @JvmField val binderAtLimit = PrinterStateReasons("binder-at-limit")
        @JvmField val binderClosed = PrinterStateReasons("binder-closed")
        @JvmField val binderConfigurationChange = PrinterStateReasons("binder-configuration-change")
        @JvmField val binderCoverClosed = PrinterStateReasons("binder-cover-closed")
        @JvmField val binderCoverOpen = PrinterStateReasons("binder-cover-open")
        @JvmField val binderEmpty = PrinterStateReasons("binder-empty")
        @JvmField val binderFull = PrinterStateReasons("binder-full")
        @JvmField val binderInterlockClosed = PrinterStateReasons("binder-interlock-closed")
        @JvmField val binderInterlockOpen = PrinterStateReasons("binder-interlock-open")
        @JvmField val binderJam = PrinterStateReasons("binder-jam")
        @JvmField val binderLifeAlmostOver = PrinterStateReasons("binder-life-almost-over")
        @JvmField val binderLifeOver = PrinterStateReasons("binder-life-over")
        @JvmField val binderMemoryExhausted = PrinterStateReasons("binder-memory-exhausted")
        @JvmField val binderMissing = PrinterStateReasons("binder-missing")
        @JvmField val binderMotorFailure = PrinterStateReasons("binder-motor-failure")
        @JvmField val binderNearLimit = PrinterStateReasons("binder-near-limit")
        @JvmField val binderOffline = PrinterStateReasons("binder-offline")
        @JvmField val binderOpened = PrinterStateReasons("binder-opened")
        @JvmField val binderOverTemperature = PrinterStateReasons("binder-over-temperature")
        @JvmField val binderPowerSaver = PrinterStateReasons("binder-power-saver")
        @JvmField val binderRecoverableFailure = PrinterStateReasons("binder-recoverable-failure")
        @JvmField val binderRecoverableStorage = PrinterStateReasons("binder-recoverable-storage")
        @JvmField val binderRemoved = PrinterStateReasons("binder-removed")
        @JvmField val binderResourceAdded = PrinterStateReasons("binder-resource-added")
        @JvmField val binderResourceRemoved = PrinterStateReasons("binder-resource-removed")
        @JvmField val binderThermistorFailure = PrinterStateReasons("binder-thermistor-failure")
        @JvmField val binderTimingFailure = PrinterStateReasons("binder-timing-failure")
        @JvmField val binderTurnedOff = PrinterStateReasons("binder-turned-off")
        @JvmField val binderTurnedOn = PrinterStateReasons("binder-turned-on")
        @JvmField val binderUnderTemperature = PrinterStateReasons("binder-under-temperature")
        @JvmField val binderUnrecoverableFailure = PrinterStateReasons("binder-unrecoverable-failure")
        @JvmField val binderUnrecoverableStorageError = PrinterStateReasons("binder-unrecoverable-storage-error")
        @JvmField val binderWarmingUp = PrinterStateReasons("binder-warming-up")
        @JvmField val cameraFailure = PrinterStateReasons("camera-failure")
        @JvmField val chamberCooling = PrinterStateReasons("chamber-cooling")
        @JvmField val chamberFailure = PrinterStateReasons("chamber-failure")
        @JvmField val chamberHeating = PrinterStateReasons("chamber-heating")
        @JvmField val chamberTemperatureHigh = PrinterStateReasons("chamber-temperature-high")
        @JvmField val chamberTemperatureLow = PrinterStateReasons("chamber-temperature-low")
        @JvmField val cleanerLifeAlmostOver = PrinterStateReasons("cleaner-life-almost-over")
        @JvmField val cleanerLifeOver = PrinterStateReasons("cleaner-life-over")
        @JvmField val configurationChange = PrinterStateReasons("configuration-change")
        @JvmField val connectingToDevice = PrinterStateReasons("connecting-to-device")
        @JvmField val coverOpen = PrinterStateReasons("cover-open")
        @JvmField val deactivated = PrinterStateReasons("deactivated")
        @JvmField val developerEmpty = PrinterStateReasons("developer-empty")
        @JvmField val developerLow = PrinterStateReasons("developer-low")
        @JvmField val dieCutterAdded = PrinterStateReasons("die-cutter-added")
        @JvmField val dieCutterAlmostEmpty = PrinterStateReasons("die-cutter-almost-empty")
        @JvmField val dieCutterAlmostFull = PrinterStateReasons("die-cutter-almost-full")
        @JvmField val dieCutterAtLimit = PrinterStateReasons("die-cutter-at-limit")
        @JvmField val dieCutterClosed = PrinterStateReasons("die-cutter-closed")
        @JvmField val dieCutterConfigurationChange = PrinterStateReasons("die-cutter-configuration-change")
        @JvmField val dieCutterCoverClosed = PrinterStateReasons("die-cutter-cover-closed")
        @JvmField val dieCutterCoverOpen = PrinterStateReasons("die-cutter-cover-open")
        @JvmField val dieCutterEmpty = PrinterStateReasons("die-cutter-empty")
        @JvmField val dieCutterFull = PrinterStateReasons("die-cutter-full")
        @JvmField val dieCutterInterlockClosed = PrinterStateReasons("die-cutter-interlock-closed")
        @JvmField val dieCutterInterlockOpen = PrinterStateReasons("die-cutter-interlock-open")
        @JvmField val dieCutterJam = PrinterStateReasons("die-cutter-jam")
        @JvmField val dieCutterLifeAlmostOver = PrinterStateReasons("die-cutter-life-almost-over")
        @JvmField val dieCutterLifeOver = PrinterStateReasons("die-cutter-life-over")
        @JvmField val dieCutterMemoryExhausted = PrinterStateReasons("die-cutter-memory-exhausted")
        @JvmField val dieCutterMissing = PrinterStateReasons("die-cutter-missing")
        @JvmField val dieCutterMotorFailure = PrinterStateReasons("die-cutter-motor-failure")
        @JvmField val dieCutterNearLimit = PrinterStateReasons("die-cutter-near-limit")
        @JvmField val dieCutterOffline = PrinterStateReasons("die-cutter-offline")
        @JvmField val dieCutterOpened = PrinterStateReasons("die-cutter-opened")
        @JvmField val dieCutterOverTemperature = PrinterStateReasons("die-cutter-over-temperature")
        @JvmField val dieCutterPowerSaver = PrinterStateReasons("die-cutter-power-saver")
        @JvmField val dieCutterRecoverableFailure = PrinterStateReasons("die-cutter-recoverable-failure")
        @JvmField val dieCutterRecoverableStorage = PrinterStateReasons("die-cutter-recoverable-storage")
        @JvmField val dieCutterRemoved = PrinterStateReasons("die-cutter-removed")
        @JvmField val dieCutterResourceAdded = PrinterStateReasons("die-cutter-resource-added")
        @JvmField val dieCutterResourceRemoved = PrinterStateReasons("die-cutter-resource-removed")
        @JvmField val dieCutterThermistorFailure = PrinterStateReasons("die-cutter-thermistor-failure")
        @JvmField val dieCutterTimingFailure = PrinterStateReasons("die-cutter-timing-failure")
        @JvmField val dieCutterTurnedOff = PrinterStateReasons("die-cutter-turned-off")
        @JvmField val dieCutterTurnedOn = PrinterStateReasons("die-cutter-turned-on")
        @JvmField val dieCutterUnderTemperature = PrinterStateReasons("die-cutter-under-temperature")
        @JvmField val dieCutterUnrecoverableFailure = PrinterStateReasons("die-cutter-unrecoverable-failure")
        @JvmField val dieCutterUnrecoverableStorageError = PrinterStateReasons("die-cutter-unrecoverable-storage-error")
        @JvmField val dieCutterWarmingUp = PrinterStateReasons("die-cutter-warming-up")
        @JvmField val doorOpen = PrinterStateReasons("door-open")
        @JvmField val extruderCooling = PrinterStateReasons("extruder-cooling")
        @JvmField val extruderFailure = PrinterStateReasons("extruder-failure")
        @JvmField val extruderHeating = PrinterStateReasons("extruder-heating")
        @JvmField val extruderJam = PrinterStateReasons("extruder-jam")
        @JvmField val extruderTemperatureHigh = PrinterStateReasons("extruder-temperature-high")
        @JvmField val extruderTemperatureLow = PrinterStateReasons("extruder-temperature-low")
        @JvmField val fanFailure = PrinterStateReasons("fan-failure")
        @JvmField val folderAdded = PrinterStateReasons("folder-added")
        @JvmField val folderAlmostEmpty = PrinterStateReasons("folder-almost-empty")
        @JvmField val folderAlmostFull = PrinterStateReasons("folder-almost-full")
        @JvmField val folderAtLimit = PrinterStateReasons("folder-at-limit")
        @JvmField val folderClosed = PrinterStateReasons("folder-closed")
        @JvmField val folderConfigurationChange = PrinterStateReasons("folder-configuration-change")
        @JvmField val folderCoverClosed = PrinterStateReasons("folder-cover-closed")
        @JvmField val folderCoverOpen = PrinterStateReasons("folder-cover-open")
        @JvmField val folderEmpty = PrinterStateReasons("folder-empty")
        @JvmField val folderFull = PrinterStateReasons("folder-full")
        @JvmField val folderInterlockClosed = PrinterStateReasons("folder-interlock-closed")
        @JvmField val folderInterlockOpen = PrinterStateReasons("folder-interlock-open")
        @JvmField val folderJam = PrinterStateReasons("folder-jam")
        @JvmField val folderLifeAlmostOver = PrinterStateReasons("folder-life-almost-over")
        @JvmField val folderLifeOver = PrinterStateReasons("folder-life-over")
        @JvmField val folderMemoryExhausted = PrinterStateReasons("folder-memory-exhausted")
        @JvmField val folderMissing = PrinterStateReasons("folder-missing")
        @JvmField val folderMotorFailure = PrinterStateReasons("folder-motor-failure")
        @JvmField val folderNearLimit = PrinterStateReasons("folder-near-limit")
        @JvmField val folderOffline = PrinterStateReasons("folder-offline")
        @JvmField val folderOpened = PrinterStateReasons("folder-opened")
        @JvmField val folderOverTemperature = PrinterStateReasons("folder-over-temperature")
        @JvmField val folderPowerSaver = PrinterStateReasons("folder-power-saver")
        @JvmField val folderRecoverableFailure = PrinterStateReasons("folder-recoverable-failure")
        @JvmField val folderRecoverableStorage = PrinterStateReasons("folder-recoverable-storage")
        @JvmField val folderRemoved = PrinterStateReasons("folder-removed")
        @JvmField val folderResourceAdded = PrinterStateReasons("folder-resource-added")
        @JvmField val folderResourceRemoved = PrinterStateReasons("folder-resource-removed")
        @JvmField val folderThermistorFailure = PrinterStateReasons("folder-thermistor-failure")
        @JvmField val folderTimingFailure = PrinterStateReasons("folder-timing-failure")
        @JvmField val folderTurnedOff = PrinterStateReasons("folder-turned-off")
        @JvmField val folderTurnedOn = PrinterStateReasons("folder-turned-on")
        @JvmField val folderUnderTemperature = PrinterStateReasons("folder-under-temperature")
        @JvmField val folderUnrecoverableFailure = PrinterStateReasons("folder-unrecoverable-failure")
        @JvmField val folderUnrecoverableStorageError = PrinterStateReasons("folder-unrecoverable-storage-error")
        @JvmField val folderWarmingUp = PrinterStateReasons("folder-warming-up")
        @JvmField val fuserOverTemp = PrinterStateReasons("fuser-over-temp")
        @JvmField val fuserUnderTemp = PrinterStateReasons("fuser-under-temp")
        @JvmField val holdNewJobs = PrinterStateReasons("hold-new-jobs")
        @JvmField val identifyPrinterRequested = PrinterStateReasons("identify-printer-requested")
        @JvmField val imprinterAdded = PrinterStateReasons("imprinter-added")
        @JvmField val imprinterAlmostEmpty = PrinterStateReasons("imprinter-almost-empty")
        @JvmField val imprinterAlmostFull = PrinterStateReasons("imprinter-almost-full")
        @JvmField val imprinterAtLimit = PrinterStateReasons("imprinter-at-limit")
        @JvmField val imprinterClosed = PrinterStateReasons("imprinter-closed")
        @JvmField val imprinterConfigurationChange = PrinterStateReasons("imprinter-configuration-change")
        @JvmField val imprinterCoverClosed = PrinterStateReasons("imprinter-cover-closed")
        @JvmField val imprinterCoverOpen = PrinterStateReasons("imprinter-cover-open")
        @JvmField val imprinterEmpty = PrinterStateReasons("imprinter-empty")
        @JvmField val imprinterFull = PrinterStateReasons("imprinter-full")
        @JvmField val imprinterInterlockClosed = PrinterStateReasons("imprinter-interlock-closed")
        @JvmField val imprinterInterlockOpen = PrinterStateReasons("imprinter-interlock-open")
        @JvmField val imprinterJam = PrinterStateReasons("imprinter-jam")
        @JvmField val imprinterLifeAlmostOver = PrinterStateReasons("imprinter-life-almost-over")
        @JvmField val imprinterLifeOver = PrinterStateReasons("imprinter-life-over")
        @JvmField val imprinterMemoryExhausted = PrinterStateReasons("imprinter-memory-exhausted")
        @JvmField val imprinterMissing = PrinterStateReasons("imprinter-missing")
        @JvmField val imprinterMotorFailure = PrinterStateReasons("imprinter-motor-failure")
        @JvmField val imprinterNearLimit = PrinterStateReasons("imprinter-near-limit")
        @JvmField val imprinterOffline = PrinterStateReasons("imprinter-offline")
        @JvmField val imprinterOpened = PrinterStateReasons("imprinter-opened")
        @JvmField val imprinterOverTemperature = PrinterStateReasons("imprinter-over-temperature")
        @JvmField val imprinterPowerSaver = PrinterStateReasons("imprinter-power-saver")
        @JvmField val imprinterRecoverableFailure = PrinterStateReasons("imprinter-recoverable-failure")
        @JvmField val imprinterRecoverableStorage = PrinterStateReasons("imprinter-recoverable-storage")
        @JvmField val imprinterRemoved = PrinterStateReasons("imprinter-removed")
        @JvmField val imprinterResourceAdded = PrinterStateReasons("imprinter-resource-added")
        @JvmField val imprinterResourceRemoved = PrinterStateReasons("imprinter-resource-removed")
        @JvmField val imprinterThermistorFailure = PrinterStateReasons("imprinter-thermistor-failure")
        @JvmField val imprinterTimingFailure = PrinterStateReasons("imprinter-timing-failure")
        @JvmField val imprinterTurnedOff = PrinterStateReasons("imprinter-turned-off")
        @JvmField val imprinterTurnedOn = PrinterStateReasons("imprinter-turned-on")
        @JvmField val imprinterUnderTemperature = PrinterStateReasons("imprinter-under-temperature")
        @JvmField val imprinterUnrecoverableFailure = PrinterStateReasons("imprinter-unrecoverable-failure")
        @JvmField val imprinterUnrecoverableStorageError = PrinterStateReasons("imprinter-unrecoverable-storage-error")
        @JvmField val imprinterWarmingUp = PrinterStateReasons("imprinter-warming-up")
        @JvmField val inputCannotFeedSizeSelected = PrinterStateReasons("input-cannot-feed-size-selected")
        @JvmField val inputManualInputRequest = PrinterStateReasons("input-manual-input-request")
        @JvmField val inputMediaColorChange = PrinterStateReasons("input-media-color-change")
        @JvmField val inputMediaFormPartsChange = PrinterStateReasons("input-media-form-parts-change")
        @JvmField val inputMediaSizeChange = PrinterStateReasons("input-media-size-change")
        @JvmField val inputMediaTypeChange = PrinterStateReasons("input-media-type-change")
        @JvmField val inputMediaWeightChange = PrinterStateReasons("input-media-weight-change")
        @JvmField val inputTrayElevationFailure = PrinterStateReasons("input-tray-elevation-failure")
        @JvmField val inputTrayMissing = PrinterStateReasons("input-tray-missing")
        @JvmField val inputTrayPositionFailure = PrinterStateReasons("input-tray-position-failure")
        @JvmField val inserterAdded = PrinterStateReasons("inserter-added")
        @JvmField val inserterAlmostEmpty = PrinterStateReasons("inserter-almost-empty")
        @JvmField val inserterAlmostFull = PrinterStateReasons("inserter-almost-full")
        @JvmField val inserterAtLimit = PrinterStateReasons("inserter-at-limit")
        @JvmField val inserterClosed = PrinterStateReasons("inserter-closed")
        @JvmField val inserterConfigurationChange = PrinterStateReasons("inserter-configuration-change")
        @JvmField val inserterCoverClosed = PrinterStateReasons("inserter-cover-closed")
        @JvmField val inserterCoverOpen = PrinterStateReasons("inserter-cover-open")
        @JvmField val inserterEmpty = PrinterStateReasons("inserter-empty")
        @JvmField val inserterFull = PrinterStateReasons("inserter-full")
        @JvmField val inserterInterlockClosed = PrinterStateReasons("inserter-interlock-closed")
        @JvmField val inserterInterlockOpen = PrinterStateReasons("inserter-interlock-open")
        @JvmField val inserterJam = PrinterStateReasons("inserter-jam")
        @JvmField val inserterLifeAlmostOver = PrinterStateReasons("inserter-life-almost-over")
        @JvmField val inserterLifeOver = PrinterStateReasons("inserter-life-over")
        @JvmField val inserterMemoryExhausted = PrinterStateReasons("inserter-memory-exhausted")
        @JvmField val inserterMissing = PrinterStateReasons("inserter-missing")
        @JvmField val inserterMotorFailure = PrinterStateReasons("inserter-motor-failure")
        @JvmField val inserterNearLimit = PrinterStateReasons("inserter-near-limit")
        @JvmField val inserterOffline = PrinterStateReasons("inserter-offline")
        @JvmField val inserterOpened = PrinterStateReasons("inserter-opened")
        @JvmField val inserterOverTemperature = PrinterStateReasons("inserter-over-temperature")
        @JvmField val inserterPowerSaver = PrinterStateReasons("inserter-power-saver")
        @JvmField val inserterRecoverableFailure = PrinterStateReasons("inserter-recoverable-failure")
        @JvmField val inserterRecoverableStorage = PrinterStateReasons("inserter-recoverable-storage")
        @JvmField val inserterRemoved = PrinterStateReasons("inserter-removed")
        @JvmField val inserterResourceAdded = PrinterStateReasons("inserter-resource-added")
        @JvmField val inserterResourceRemoved = PrinterStateReasons("inserter-resource-removed")
        @JvmField val inserterThermistorFailure = PrinterStateReasons("inserter-thermistor-failure")
        @JvmField val inserterTimingFailure = PrinterStateReasons("inserter-timing-failure")
        @JvmField val inserterTurnedOff = PrinterStateReasons("inserter-turned-off")
        @JvmField val inserterTurnedOn = PrinterStateReasons("inserter-turned-on")
        @JvmField val inserterUnderTemperature = PrinterStateReasons("inserter-under-temperature")
        @JvmField val inserterUnrecoverableFailure = PrinterStateReasons("inserter-unrecoverable-failure")
        @JvmField val inserterUnrecoverableStorageError = PrinterStateReasons("inserter-unrecoverable-storage-error")
        @JvmField val inserterWarmingUp = PrinterStateReasons("inserter-warming-up")
        @JvmField val interlockClosed = PrinterStateReasons("interlock-closed")
        @JvmField val interlockOpen = PrinterStateReasons("interlock-open")
        @JvmField val interpreterCartridgeAdded = PrinterStateReasons("interpreter-cartridge-added")
        @JvmField val interpreterCartridgeDeleted = PrinterStateReasons("interpreter-cartridge-deleted")
        @JvmField val interpreterComplexPageEncountered = PrinterStateReasons("interpreter-complex-page-encountered")
        @JvmField val interpreterMemoryDecrease = PrinterStateReasons("interpreter-memory-decrease")
        @JvmField val interpreterMemoryIncrease = PrinterStateReasons("interpreter-memory-increase")
        @JvmField val interpreterResourceAdded = PrinterStateReasons("interpreter-resource-added")
        @JvmField val interpreterResourceDeleted = PrinterStateReasons("interpreter-resource-deleted")
        @JvmField val interpreterResourceUnavailable = PrinterStateReasons("interpreter-resource-unavailable")
        @JvmField val lampAtEol = PrinterStateReasons("lamp-at-eol")
        @JvmField val lampFailure = PrinterStateReasons("lamp-failure")
        @JvmField val lampNearEol = PrinterStateReasons("lamp-near-eol")
        @JvmField val laserAtEol = PrinterStateReasons("laser-at-eol")
        @JvmField val laserFailure = PrinterStateReasons("laser-failure")
        @JvmField val laserNearEol = PrinterStateReasons("laser-near-eol")
        @JvmField val makeEnvelopeAdded = PrinterStateReasons("make-envelope-added")
        @JvmField val makeEnvelopeAlmostEmpty = PrinterStateReasons("make-envelope-almost-empty")
        @JvmField val makeEnvelopeAlmostFull = PrinterStateReasons("make-envelope-almost-full")
        @JvmField val makeEnvelopeAtLimit = PrinterStateReasons("make-envelope-at-limit")
        @JvmField val makeEnvelopeClosed = PrinterStateReasons("make-envelope-closed")
        @JvmField val makeEnvelopeConfigurationChange = PrinterStateReasons("make-envelope-configuration-change")
        @JvmField val makeEnvelopeCoverClosed = PrinterStateReasons("make-envelope-cover-closed")
        @JvmField val makeEnvelopeCoverOpen = PrinterStateReasons("make-envelope-cover-open")
        @JvmField val makeEnvelopeEmpty = PrinterStateReasons("make-envelope-empty")
        @JvmField val makeEnvelopeFull = PrinterStateReasons("make-envelope-full")
        @JvmField val makeEnvelopeInterlockClosed = PrinterStateReasons("make-envelope-interlock-closed")
        @JvmField val makeEnvelopeInterlockOpen = PrinterStateReasons("make-envelope-interlock-open")
        @JvmField val makeEnvelopeJam = PrinterStateReasons("make-envelope-jam")
        @JvmField val makeEnvelopeLifeAlmostOver = PrinterStateReasons("make-envelope-life-almost-over")
        @JvmField val makeEnvelopeLifeOver = PrinterStateReasons("make-envelope-life-over")
        @JvmField val makeEnvelopeMemoryExhausted = PrinterStateReasons("make-envelope-memory-exhausted")
        @JvmField val makeEnvelopeMissing = PrinterStateReasons("make-envelope-missing")
        @JvmField val makeEnvelopeMotorFailure = PrinterStateReasons("make-envelope-motor-failure")
        @JvmField val makeEnvelopeNearLimit = PrinterStateReasons("make-envelope-near-limit")
        @JvmField val makeEnvelopeOffline = PrinterStateReasons("make-envelope-offline")
        @JvmField val makeEnvelopeOpened = PrinterStateReasons("make-envelope-opened")
        @JvmField val makeEnvelopeOverTemperature = PrinterStateReasons("make-envelope-over-temperature")
        @JvmField val makeEnvelopePowerSaver = PrinterStateReasons("make-envelope-power-saver")
        @JvmField val makeEnvelopeRecoverableFailure = PrinterStateReasons("make-envelope-recoverable-failure")
        @JvmField val makeEnvelopeRecoverableStorage = PrinterStateReasons("make-envelope-recoverable-storage")
        @JvmField val makeEnvelopeRemoved = PrinterStateReasons("make-envelope-removed")
        @JvmField val makeEnvelopeResourceAdded = PrinterStateReasons("make-envelope-resource-added")
        @JvmField val makeEnvelopeResourceRemoved = PrinterStateReasons("make-envelope-resource-removed")
        @JvmField val makeEnvelopeThermistorFailure = PrinterStateReasons("make-envelope-thermistor-failure")
        @JvmField val makeEnvelopeTimingFailure = PrinterStateReasons("make-envelope-timing-failure")
        @JvmField val makeEnvelopeTurnedOff = PrinterStateReasons("make-envelope-turned-off")
        @JvmField val makeEnvelopeTurnedOn = PrinterStateReasons("make-envelope-turned-on")
        @JvmField val makeEnvelopeUnderTemperature = PrinterStateReasons("make-envelope-under-temperature")
        @JvmField val makeEnvelopeUnrecoverableFailure = PrinterStateReasons("make-envelope-unrecoverable-failure")
        @JvmField val makeEnvelopeUnrecoverableStorageError = PrinterStateReasons("make-envelope-unrecoverable-storage-error")
        @JvmField val makeEnvelopeWarmingUp = PrinterStateReasons("make-envelope-warming-up")
        @JvmField val markerAdjustingPrintQuality = PrinterStateReasons("marker-adjusting-print-quality")
        @JvmField val markerDeveloperAlmostEmpty = PrinterStateReasons("marker-developer-almost-empty")
        @JvmField val markerDeveloperEmpty = PrinterStateReasons("marker-developer-empty")
        @JvmField val markerFuserThermistorFailure = PrinterStateReasons("marker-fuser-thermistor-failure")
        @JvmField val markerFuserTimingFailure = PrinterStateReasons("marker-fuser-timing-failure")
        @JvmField val markerInkAlmostEmpty = PrinterStateReasons("marker-ink-almost-empty")
        @JvmField val markerInkEmpty = PrinterStateReasons("marker-ink-empty")
        @JvmField val markerPrintRibbonAlmostEmpty = PrinterStateReasons("marker-print-ribbon-almost-empty")
        @JvmField val markerPrintRibbonEmpty = PrinterStateReasons("marker-print-ribbon-empty")
        @JvmField val markerSupplyEmpty = PrinterStateReasons("marker-supply-empty")
        @JvmField val markerSupplyLow = PrinterStateReasons("marker-supply-low")
        @JvmField val markerTonerCartridgeMissing = PrinterStateReasons("marker-toner-cartridge-missing")
        @JvmField val markerWasteAlmostFull = PrinterStateReasons("marker-waste-almost-full")
        @JvmField val markerWasteFull = PrinterStateReasons("marker-waste-full")
        @JvmField val markerWasteInkReceptacleAlmostFull = PrinterStateReasons("marker-waste-ink-receptacle-almost-full")
        @JvmField val markerWasteInkReceptacleFull = PrinterStateReasons("marker-waste-ink-receptacle-full")
        @JvmField val markerWasteTonerReceptacleAlmostFull = PrinterStateReasons("marker-waste-toner-receptacle-almost-full")
        @JvmField val markerWasteTonerReceptacleFull = PrinterStateReasons("marker-waste-toner-receptacle-full")
        @JvmField val materialEmpty = PrinterStateReasons("material-empty")
        @JvmField val materialLow = PrinterStateReasons("material-low")
        @JvmField val materialNeeded = PrinterStateReasons("material-needed")
        @JvmField val mediaEmpty = PrinterStateReasons("media-empty")
        @JvmField val mediaJam = PrinterStateReasons("media-jam")
        @JvmField val mediaLow = PrinterStateReasons("media-low")
        @JvmField val mediaNeeded = PrinterStateReasons("media-needed")
        @JvmField val mediaPathCannotDuplexMediaSelected = PrinterStateReasons("media-path-cannot-duplex-media-selected")
        @JvmField val mediaPathMediaTrayAlmostFull = PrinterStateReasons("media-path-media-tray-almost-full")
        @JvmField val mediaPathMediaTrayFull = PrinterStateReasons("media-path-media-tray-full")
        @JvmField val mediaPathMediaTrayMissing = PrinterStateReasons("media-path-media-tray-missing")
        @JvmField val motorFailure = PrinterStateReasons("motor-failure")
        @JvmField val movingToPaused = PrinterStateReasons("moving-to-paused")
        @JvmField val none = PrinterStateReasons("none")
        @JvmField val opcLifeOver = PrinterStateReasons("opc-life-over")
        @JvmField val opcNearEol = PrinterStateReasons("opc-near-eol")
        @JvmField val other = PrinterStateReasons("other")
        @JvmField val outputAreaAlmostFull = PrinterStateReasons("output-area-almost-full")
        @JvmField val outputAreaFull = PrinterStateReasons("output-area-full")
        @JvmField val outputMailboxSelectFailure = PrinterStateReasons("output-mailbox-select-failure")
        @JvmField val outputTrayMissing = PrinterStateReasons("output-tray-missing")
        @JvmField val paused = PrinterStateReasons("paused")
        @JvmField val perforaterAdded = PrinterStateReasons("perforater-added")
        @JvmField val perforaterAlmostEmpty = PrinterStateReasons("perforater-almost-empty")
        @JvmField val perforaterAlmostFull = PrinterStateReasons("perforater-almost-full")
        @JvmField val perforaterAtLimit = PrinterStateReasons("perforater-at-limit")
        @JvmField val perforaterClosed = PrinterStateReasons("perforater-closed")
        @JvmField val perforaterConfigurationChange = PrinterStateReasons("perforater-configuration-change")
        @JvmField val perforaterCoverClosed = PrinterStateReasons("perforater-cover-closed")
        @JvmField val perforaterCoverOpen = PrinterStateReasons("perforater-cover-open")
        @JvmField val perforaterEmpty = PrinterStateReasons("perforater-empty")
        @JvmField val perforaterFull = PrinterStateReasons("perforater-full")
        @JvmField val perforaterInterlockClosed = PrinterStateReasons("perforater-interlock-closed")
        @JvmField val perforaterInterlockOpen = PrinterStateReasons("perforater-interlock-open")
        @JvmField val perforaterJam = PrinterStateReasons("perforater-jam")
        @JvmField val perforaterLifeAlmostOver = PrinterStateReasons("perforater-life-almost-over")
        @JvmField val perforaterLifeOver = PrinterStateReasons("perforater-life-over")
        @JvmField val perforaterMemoryExhausted = PrinterStateReasons("perforater-memory-exhausted")
        @JvmField val perforaterMissing = PrinterStateReasons("perforater-missing")
        @JvmField val perforaterMotorFailure = PrinterStateReasons("perforater-motor-failure")
        @JvmField val perforaterNearLimit = PrinterStateReasons("perforater-near-limit")
        @JvmField val perforaterOffline = PrinterStateReasons("perforater-offline")
        @JvmField val perforaterOpened = PrinterStateReasons("perforater-opened")
        @JvmField val perforaterOverTemperature = PrinterStateReasons("perforater-over-temperature")
        @JvmField val perforaterPowerSaver = PrinterStateReasons("perforater-power-saver")
        @JvmField val perforaterRecoverableFailure = PrinterStateReasons("perforater-recoverable-failure")
        @JvmField val perforaterRecoverableStorage = PrinterStateReasons("perforater-recoverable-storage")
        @JvmField val perforaterRemoved = PrinterStateReasons("perforater-removed")
        @JvmField val perforaterResourceAdded = PrinterStateReasons("perforater-resource-added")
        @JvmField val perforaterResourceRemoved = PrinterStateReasons("perforater-resource-removed")
        @JvmField val perforaterThermistorFailure = PrinterStateReasons("perforater-thermistor-failure")
        @JvmField val perforaterTimingFailure = PrinterStateReasons("perforater-timing-failure")
        @JvmField val perforaterTurnedOff = PrinterStateReasons("perforater-turned-off")
        @JvmField val perforaterTurnedOn = PrinterStateReasons("perforater-turned-on")
        @JvmField val perforaterUnderTemperature = PrinterStateReasons("perforater-under-temperature")
        @JvmField val perforaterUnrecoverableFailure = PrinterStateReasons("perforater-unrecoverable-failure")
        @JvmField val perforaterUnrecoverableStorageError = PrinterStateReasons("perforater-unrecoverable-storage-error")
        @JvmField val perforaterWarmingUp = PrinterStateReasons("perforater-warming-up")
        @JvmField val platformCooling = PrinterStateReasons("platform-cooling")
        @JvmField val platformFailure = PrinterStateReasons("platform-failure")
        @JvmField val platformHeating = PrinterStateReasons("platform-heating")
        @JvmField val platformTemperatureHigh = PrinterStateReasons("platform-temperature-high")
        @JvmField val platformTemperatureLow = PrinterStateReasons("platform-temperature-low")
        @JvmField val powerDown = PrinterStateReasons("power-down")
        @JvmField val powerUp = PrinterStateReasons("power-up")
        @JvmField val printerManualReset = PrinterStateReasons("printer-manual-reset")
        @JvmField val printerNmsReset = PrinterStateReasons("printer-nms-reset")
        @JvmField val printerReadyToPrint = PrinterStateReasons("printer-ready-to-print")
        @JvmField val puncherAdded = PrinterStateReasons("puncher-added")
        @JvmField val puncherAlmostEmpty = PrinterStateReasons("puncher-almost-empty")
        @JvmField val puncherAlmostFull = PrinterStateReasons("puncher-almost-full")
        @JvmField val puncherAtLimit = PrinterStateReasons("puncher-at-limit")
        @JvmField val puncherClosed = PrinterStateReasons("puncher-closed")
        @JvmField val puncherConfigurationChange = PrinterStateReasons("puncher-configuration-change")
        @JvmField val puncherCoverClosed = PrinterStateReasons("puncher-cover-closed")
        @JvmField val puncherCoverOpen = PrinterStateReasons("puncher-cover-open")
        @JvmField val puncherEmpty = PrinterStateReasons("puncher-empty")
        @JvmField val puncherFull = PrinterStateReasons("puncher-full")
        @JvmField val puncherInterlockClosed = PrinterStateReasons("puncher-interlock-closed")
        @JvmField val puncherInterlockOpen = PrinterStateReasons("puncher-interlock-open")
        @JvmField val puncherJam = PrinterStateReasons("puncher-jam")
        @JvmField val puncherLifeAlmostOver = PrinterStateReasons("puncher-life-almost-over")
        @JvmField val puncherLifeOver = PrinterStateReasons("puncher-life-over")
        @JvmField val puncherMemoryExhausted = PrinterStateReasons("puncher-memory-exhausted")
        @JvmField val puncherMissing = PrinterStateReasons("puncher-missing")
        @JvmField val puncherMotorFailure = PrinterStateReasons("puncher-motor-failure")
        @JvmField val puncherNearLimit = PrinterStateReasons("puncher-near-limit")
        @JvmField val puncherOffline = PrinterStateReasons("puncher-offline")
        @JvmField val puncherOpened = PrinterStateReasons("puncher-opened")
        @JvmField val puncherOverTemperature = PrinterStateReasons("puncher-over-temperature")
        @JvmField val puncherPowerSaver = PrinterStateReasons("puncher-power-saver")
        @JvmField val puncherRecoverableFailure = PrinterStateReasons("puncher-recoverable-failure")
        @JvmField val puncherRecoverableStorage = PrinterStateReasons("puncher-recoverable-storage")
        @JvmField val puncherRemoved = PrinterStateReasons("puncher-removed")
        @JvmField val puncherResourceAdded = PrinterStateReasons("puncher-resource-added")
        @JvmField val puncherResourceRemoved = PrinterStateReasons("puncher-resource-removed")
        @JvmField val puncherThermistorFailure = PrinterStateReasons("puncher-thermistor-failure")
        @JvmField val puncherTimingFailure = PrinterStateReasons("puncher-timing-failure")
        @JvmField val puncherTurnedOff = PrinterStateReasons("puncher-turned-off")
        @JvmField val puncherTurnedOn = PrinterStateReasons("puncher-turned-on")
        @JvmField val puncherUnderTemperature = PrinterStateReasons("puncher-under-temperature")
        @JvmField val puncherUnrecoverableFailure = PrinterStateReasons("puncher-unrecoverable-failure")
        @JvmField val puncherUnrecoverableStorageError = PrinterStateReasons("puncher-unrecoverable-storage-error")
        @JvmField val puncherWarmingUp = PrinterStateReasons("puncher-warming-up")
        @JvmField val separationCutterAdded = PrinterStateReasons("separation-cutter-added")
        @JvmField val separationCutterAlmostEmpty = PrinterStateReasons("separation-cutter-almost-empty")
        @JvmField val separationCutterAlmostFull = PrinterStateReasons("separation-cutter-almost-full")
        @JvmField val separationCutterAtLimit = PrinterStateReasons("separation-cutter-at-limit")
        @JvmField val separationCutterClosed = PrinterStateReasons("separation-cutter-closed")
        @JvmField val separationCutterConfigurationChange = PrinterStateReasons("separation-cutter-configuration-change")
        @JvmField val separationCutterCoverClosed = PrinterStateReasons("separation-cutter-cover-closed")
        @JvmField val separationCutterCoverOpen = PrinterStateReasons("separation-cutter-cover-open")
        @JvmField val separationCutterEmpty = PrinterStateReasons("separation-cutter-empty")
        @JvmField val separationCutterFull = PrinterStateReasons("separation-cutter-full")
        @JvmField val separationCutterInterlockClosed = PrinterStateReasons("separation-cutter-interlock-closed")
        @JvmField val separationCutterInterlockOpen = PrinterStateReasons("separation-cutter-interlock-open")
        @JvmField val separationCutterJam = PrinterStateReasons("separation-cutter-jam")
        @JvmField val separationCutterLifeAlmostOver = PrinterStateReasons("separation-cutter-life-almost-over")
        @JvmField val separationCutterLifeOver = PrinterStateReasons("separation-cutter-life-over")
        @JvmField val separationCutterMemoryExhausted = PrinterStateReasons("separation-cutter-memory-exhausted")
        @JvmField val separationCutterMissing = PrinterStateReasons("separation-cutter-missing")
        @JvmField val separationCutterMotorFailure = PrinterStateReasons("separation-cutter-motor-failure")
        @JvmField val separationCutterNearLimit = PrinterStateReasons("separation-cutter-near-limit")
        @JvmField val separationCutterOffline = PrinterStateReasons("separation-cutter-offline")
        @JvmField val separationCutterOpened = PrinterStateReasons("separation-cutter-opened")
        @JvmField val separationCutterOverTemperature = PrinterStateReasons("separation-cutter-over-temperature")
        @JvmField val separationCutterPowerSaver = PrinterStateReasons("separation-cutter-power-saver")
        @JvmField val separationCutterRecoverableFailure = PrinterStateReasons("separation-cutter-recoverable-failure")
        @JvmField val separationCutterRecoverableStorage = PrinterStateReasons("separation-cutter-recoverable-storage")
        @JvmField val separationCutterRemoved = PrinterStateReasons("separation-cutter-removed")
        @JvmField val separationCutterResourceAdded = PrinterStateReasons("separation-cutter-resource-added")
        @JvmField val separationCutterResourceRemoved = PrinterStateReasons("separation-cutter-resource-removed")
        @JvmField val separationCutterThermistorFailure = PrinterStateReasons("separation-cutter-thermistor-failure")
        @JvmField val separationCutterTimingFailure = PrinterStateReasons("separation-cutter-timing-failure")
        @JvmField val separationCutterTurnedOff = PrinterStateReasons("separation-cutter-turned-off")
        @JvmField val separationCutterTurnedOn = PrinterStateReasons("separation-cutter-turned-on")
        @JvmField val separationCutterUnderTemperature = PrinterStateReasons("separation-cutter-under-temperature")
        @JvmField val separationCutterUnrecoverableFailure = PrinterStateReasons("separation-cutter-unrecoverable-failure")
        @JvmField val separationCutterUnrecoverableStorageError = PrinterStateReasons("separation-cutter-unrecoverable-storage-error")
        @JvmField val separationCutterWarmingUp = PrinterStateReasons("separation-cutter-warming-up")
        @JvmField val sheetRotatorAdded = PrinterStateReasons("sheet-rotator-added")
        @JvmField val sheetRotatorAlmostEmpty = PrinterStateReasons("sheet-rotator-almost-empty")
        @JvmField val sheetRotatorAlmostFull = PrinterStateReasons("sheet-rotator-almost-full")
        @JvmField val sheetRotatorAtLimit = PrinterStateReasons("sheet-rotator-at-limit")
        @JvmField val sheetRotatorClosed = PrinterStateReasons("sheet-rotator-closed")
        @JvmField val sheetRotatorConfigurationChange = PrinterStateReasons("sheet-rotator-configuration-change")
        @JvmField val sheetRotatorCoverClosed = PrinterStateReasons("sheet-rotator-cover-closed")
        @JvmField val sheetRotatorCoverOpen = PrinterStateReasons("sheet-rotator-cover-open")
        @JvmField val sheetRotatorEmpty = PrinterStateReasons("sheet-rotator-empty")
        @JvmField val sheetRotatorFull = PrinterStateReasons("sheet-rotator-full")
        @JvmField val sheetRotatorInterlockClosed = PrinterStateReasons("sheet-rotator-interlock-closed")
        @JvmField val sheetRotatorInterlockOpen = PrinterStateReasons("sheet-rotator-interlock-open")
        @JvmField val sheetRotatorJam = PrinterStateReasons("sheet-rotator-jam")
        @JvmField val sheetRotatorLifeAlmostOver = PrinterStateReasons("sheet-rotator-life-almost-over")
        @JvmField val sheetRotatorLifeOver = PrinterStateReasons("sheet-rotator-life-over")
        @JvmField val sheetRotatorMemoryExhausted = PrinterStateReasons("sheet-rotator-memory-exhausted")
        @JvmField val sheetRotatorMissing = PrinterStateReasons("sheet-rotator-missing")
        @JvmField val sheetRotatorMotorFailure = PrinterStateReasons("sheet-rotator-motor-failure")
        @JvmField val sheetRotatorNearLimit = PrinterStateReasons("sheet-rotator-near-limit")
        @JvmField val sheetRotatorOffline = PrinterStateReasons("sheet-rotator-offline")
        @JvmField val sheetRotatorOpened = PrinterStateReasons("sheet-rotator-opened")
        @JvmField val sheetRotatorOverTemperature = PrinterStateReasons("sheet-rotator-over-temperature")
        @JvmField val sheetRotatorPowerSaver = PrinterStateReasons("sheet-rotator-power-saver")
        @JvmField val sheetRotatorRecoverableFailure = PrinterStateReasons("sheet-rotator-recoverable-failure")
        @JvmField val sheetRotatorRecoverableStorage = PrinterStateReasons("sheet-rotator-recoverable-storage")
        @JvmField val sheetRotatorRemoved = PrinterStateReasons("sheet-rotator-removed")
        @JvmField val sheetRotatorResourceAdded = PrinterStateReasons("sheet-rotator-resource-added")
        @JvmField val sheetRotatorResourceRemoved = PrinterStateReasons("sheet-rotator-resource-removed")
        @JvmField val sheetRotatorThermistorFailure = PrinterStateReasons("sheet-rotator-thermistor-failure")
        @JvmField val sheetRotatorTimingFailure = PrinterStateReasons("sheet-rotator-timing-failure")
        @JvmField val sheetRotatorTurnedOff = PrinterStateReasons("sheet-rotator-turned-off")
        @JvmField val sheetRotatorTurnedOn = PrinterStateReasons("sheet-rotator-turned-on")
        @JvmField val sheetRotatorUnderTemperature = PrinterStateReasons("sheet-rotator-under-temperature")
        @JvmField val sheetRotatorUnrecoverableFailure = PrinterStateReasons("sheet-rotator-unrecoverable-failure")
        @JvmField val sheetRotatorUnrecoverableStorageError = PrinterStateReasons("sheet-rotator-unrecoverable-storage-error")
        @JvmField val sheetRotatorWarmingUp = PrinterStateReasons("sheet-rotator-warming-up")
        @JvmField val shutdown = PrinterStateReasons("shutdown")
        @JvmField val slitterAdded = PrinterStateReasons("slitter-added")
        @JvmField val slitterAlmostEmpty = PrinterStateReasons("slitter-almost-empty")
        @JvmField val slitterAlmostFull = PrinterStateReasons("slitter-almost-full")
        @JvmField val slitterAtLimit = PrinterStateReasons("slitter-at-limit")
        @JvmField val slitterClosed = PrinterStateReasons("slitter-closed")
        @JvmField val slitterConfigurationChange = PrinterStateReasons("slitter-configuration-change")
        @JvmField val slitterCoverClosed = PrinterStateReasons("slitter-cover-closed")
        @JvmField val slitterCoverOpen = PrinterStateReasons("slitter-cover-open")
        @JvmField val slitterEmpty = PrinterStateReasons("slitter-empty")
        @JvmField val slitterFull = PrinterStateReasons("slitter-full")
        @JvmField val slitterInterlockClosed = PrinterStateReasons("slitter-interlock-closed")
        @JvmField val slitterInterlockOpen = PrinterStateReasons("slitter-interlock-open")
        @JvmField val slitterJam = PrinterStateReasons("slitter-jam")
        @JvmField val slitterLifeAlmostOver = PrinterStateReasons("slitter-life-almost-over")
        @JvmField val slitterLifeOver = PrinterStateReasons("slitter-life-over")
        @JvmField val slitterMemoryExhausted = PrinterStateReasons("slitter-memory-exhausted")
        @JvmField val slitterMissing = PrinterStateReasons("slitter-missing")
        @JvmField val slitterMotorFailure = PrinterStateReasons("slitter-motor-failure")
        @JvmField val slitterNearLimit = PrinterStateReasons("slitter-near-limit")
        @JvmField val slitterOffline = PrinterStateReasons("slitter-offline")
        @JvmField val slitterOpened = PrinterStateReasons("slitter-opened")
        @JvmField val slitterOverTemperature = PrinterStateReasons("slitter-over-temperature")
        @JvmField val slitterPowerSaver = PrinterStateReasons("slitter-power-saver")
        @JvmField val slitterRecoverableFailure = PrinterStateReasons("slitter-recoverable-failure")
        @JvmField val slitterRecoverableStorage = PrinterStateReasons("slitter-recoverable-storage")
        @JvmField val slitterRemoved = PrinterStateReasons("slitter-removed")
        @JvmField val slitterResourceAdded = PrinterStateReasons("slitter-resource-added")
        @JvmField val slitterResourceRemoved = PrinterStateReasons("slitter-resource-removed")
        @JvmField val slitterThermistorFailure = PrinterStateReasons("slitter-thermistor-failure")
        @JvmField val slitterTimingFailure = PrinterStateReasons("slitter-timing-failure")
        @JvmField val slitterTurnedOff = PrinterStateReasons("slitter-turned-off")
        @JvmField val slitterTurnedOn = PrinterStateReasons("slitter-turned-on")
        @JvmField val slitterUnderTemperature = PrinterStateReasons("slitter-under-temperature")
        @JvmField val slitterUnrecoverableFailure = PrinterStateReasons("slitter-unrecoverable-failure")
        @JvmField val slitterUnrecoverableStorageError = PrinterStateReasons("slitter-unrecoverable-storage-error")
        @JvmField val slitterWarmingUp = PrinterStateReasons("slitter-warming-up")
        @JvmField val spoolAreaFull = PrinterStateReasons("spool-area-full")
        @JvmField val stackerAdded = PrinterStateReasons("stacker-added")
        @JvmField val stackerAlmostEmpty = PrinterStateReasons("stacker-almost-empty")
        @JvmField val stackerAlmostFull = PrinterStateReasons("stacker-almost-full")
        @JvmField val stackerAtLimit = PrinterStateReasons("stacker-at-limit")
        @JvmField val stackerClosed = PrinterStateReasons("stacker-closed")
        @JvmField val stackerConfigurationChange = PrinterStateReasons("stacker-configuration-change")
        @JvmField val stackerCoverClosed = PrinterStateReasons("stacker-cover-closed")
        @JvmField val stackerCoverOpen = PrinterStateReasons("stacker-cover-open")
        @JvmField val stackerEmpty = PrinterStateReasons("stacker-empty")
        @JvmField val stackerFull = PrinterStateReasons("stacker-full")
        @JvmField val stackerInterlockClosed = PrinterStateReasons("stacker-interlock-closed")
        @JvmField val stackerInterlockOpen = PrinterStateReasons("stacker-interlock-open")
        @JvmField val stackerJam = PrinterStateReasons("stacker-jam")
        @JvmField val stackerLifeAlmostOver = PrinterStateReasons("stacker-life-almost-over")
        @JvmField val stackerLifeOver = PrinterStateReasons("stacker-life-over")
        @JvmField val stackerMemoryExhausted = PrinterStateReasons("stacker-memory-exhausted")
        @JvmField val stackerMissing = PrinterStateReasons("stacker-missing")
        @JvmField val stackerMotorFailure = PrinterStateReasons("stacker-motor-failure")
        @JvmField val stackerNearLimit = PrinterStateReasons("stacker-near-limit")
        @JvmField val stackerOffline = PrinterStateReasons("stacker-offline")
        @JvmField val stackerOpened = PrinterStateReasons("stacker-opened")
        @JvmField val stackerOverTemperature = PrinterStateReasons("stacker-over-temperature")
        @JvmField val stackerPowerSaver = PrinterStateReasons("stacker-power-saver")
        @JvmField val stackerRecoverableFailure = PrinterStateReasons("stacker-recoverable-failure")
        @JvmField val stackerRecoverableStorage = PrinterStateReasons("stacker-recoverable-storage")
        @JvmField val stackerRemoved = PrinterStateReasons("stacker-removed")
        @JvmField val stackerResourceAdded = PrinterStateReasons("stacker-resource-added")
        @JvmField val stackerResourceRemoved = PrinterStateReasons("stacker-resource-removed")
        @JvmField val stackerThermistorFailure = PrinterStateReasons("stacker-thermistor-failure")
        @JvmField val stackerTimingFailure = PrinterStateReasons("stacker-timing-failure")
        @JvmField val stackerTurnedOff = PrinterStateReasons("stacker-turned-off")
        @JvmField val stackerTurnedOn = PrinterStateReasons("stacker-turned-on")
        @JvmField val stackerUnderTemperature = PrinterStateReasons("stacker-under-temperature")
        @JvmField val stackerUnrecoverableFailure = PrinterStateReasons("stacker-unrecoverable-failure")
        @JvmField val stackerUnrecoverableStorageError = PrinterStateReasons("stacker-unrecoverable-storage-error")
        @JvmField val stackerWarmingUp = PrinterStateReasons("stacker-warming-up")
        @JvmField val staplerAdded = PrinterStateReasons("stapler-added")
        @JvmField val staplerAlmostEmpty = PrinterStateReasons("stapler-almost-empty")
        @JvmField val staplerAlmostFull = PrinterStateReasons("stapler-almost-full")
        @JvmField val staplerAtLimit = PrinterStateReasons("stapler-at-limit")
        @JvmField val staplerClosed = PrinterStateReasons("stapler-closed")
        @JvmField val staplerConfigurationChange = PrinterStateReasons("stapler-configuration-change")
        @JvmField val staplerCoverClosed = PrinterStateReasons("stapler-cover-closed")
        @JvmField val staplerCoverOpen = PrinterStateReasons("stapler-cover-open")
        @JvmField val staplerEmpty = PrinterStateReasons("stapler-empty")
        @JvmField val staplerFull = PrinterStateReasons("stapler-full")
        @JvmField val staplerInterlockClosed = PrinterStateReasons("stapler-interlock-closed")
        @JvmField val staplerInterlockOpen = PrinterStateReasons("stapler-interlock-open")
        @JvmField val staplerJam = PrinterStateReasons("stapler-jam")
        @JvmField val staplerLifeAlmostOver = PrinterStateReasons("stapler-life-almost-over")
        @JvmField val staplerLifeOver = PrinterStateReasons("stapler-life-over")
        @JvmField val staplerMemoryExhausted = PrinterStateReasons("stapler-memory-exhausted")
        @JvmField val staplerMissing = PrinterStateReasons("stapler-missing")
        @JvmField val staplerMotorFailure = PrinterStateReasons("stapler-motor-failure")
        @JvmField val staplerNearLimit = PrinterStateReasons("stapler-near-limit")
        @JvmField val staplerOffline = PrinterStateReasons("stapler-offline")
        @JvmField val staplerOpened = PrinterStateReasons("stapler-opened")
        @JvmField val staplerOverTemperature = PrinterStateReasons("stapler-over-temperature")
        @JvmField val staplerPowerSaver = PrinterStateReasons("stapler-power-saver")
        @JvmField val staplerRecoverableFailure = PrinterStateReasons("stapler-recoverable-failure")
        @JvmField val staplerRecoverableStorage = PrinterStateReasons("stapler-recoverable-storage")
        @JvmField val staplerRemoved = PrinterStateReasons("stapler-removed")
        @JvmField val staplerResourceAdded = PrinterStateReasons("stapler-resource-added")
        @JvmField val staplerResourceRemoved = PrinterStateReasons("stapler-resource-removed")
        @JvmField val staplerThermistorFailure = PrinterStateReasons("stapler-thermistor-failure")
        @JvmField val staplerTimingFailure = PrinterStateReasons("stapler-timing-failure")
        @JvmField val staplerTurnedOff = PrinterStateReasons("stapler-turned-off")
        @JvmField val staplerTurnedOn = PrinterStateReasons("stapler-turned-on")
        @JvmField val staplerUnderTemperature = PrinterStateReasons("stapler-under-temperature")
        @JvmField val staplerUnrecoverableFailure = PrinterStateReasons("stapler-unrecoverable-failure")
        @JvmField val staplerUnrecoverableStorageError = PrinterStateReasons("stapler-unrecoverable-storage-error")
        @JvmField val staplerWarmingUp = PrinterStateReasons("stapler-warming-up")
        @JvmField val stitcherAdded = PrinterStateReasons("stitcher-added")
        @JvmField val stitcherAlmostEmpty = PrinterStateReasons("stitcher-almost-empty")
        @JvmField val stitcherAlmostFull = PrinterStateReasons("stitcher-almost-full")
        @JvmField val stitcherAtLimit = PrinterStateReasons("stitcher-at-limit")
        @JvmField val stitcherClosed = PrinterStateReasons("stitcher-closed")
        @JvmField val stitcherConfigurationChange = PrinterStateReasons("stitcher-configuration-change")
        @JvmField val stitcherCoverClosed = PrinterStateReasons("stitcher-cover-closed")
        @JvmField val stitcherCoverOpen = PrinterStateReasons("stitcher-cover-open")
        @JvmField val stitcherEmpty = PrinterStateReasons("stitcher-empty")
        @JvmField val stitcherFull = PrinterStateReasons("stitcher-full")
        @JvmField val stitcherInterlockClosed = PrinterStateReasons("stitcher-interlock-closed")
        @JvmField val stitcherInterlockOpen = PrinterStateReasons("stitcher-interlock-open")
        @JvmField val stitcherJam = PrinterStateReasons("stitcher-jam")
        @JvmField val stitcherLifeAlmostOver = PrinterStateReasons("stitcher-life-almost-over")
        @JvmField val stitcherLifeOver = PrinterStateReasons("stitcher-life-over")
        @JvmField val stitcherMemoryExhausted = PrinterStateReasons("stitcher-memory-exhausted")
        @JvmField val stitcherMissing = PrinterStateReasons("stitcher-missing")
        @JvmField val stitcherMotorFailure = PrinterStateReasons("stitcher-motor-failure")
        @JvmField val stitcherNearLimit = PrinterStateReasons("stitcher-near-limit")
        @JvmField val stitcherOffline = PrinterStateReasons("stitcher-offline")
        @JvmField val stitcherOpened = PrinterStateReasons("stitcher-opened")
        @JvmField val stitcherOverTemperature = PrinterStateReasons("stitcher-over-temperature")
        @JvmField val stitcherPowerSaver = PrinterStateReasons("stitcher-power-saver")
        @JvmField val stitcherRecoverableFailure = PrinterStateReasons("stitcher-recoverable-failure")
        @JvmField val stitcherRecoverableStorage = PrinterStateReasons("stitcher-recoverable-storage")
        @JvmField val stitcherRemoved = PrinterStateReasons("stitcher-removed")
        @JvmField val stitcherResourceAdded = PrinterStateReasons("stitcher-resource-added")
        @JvmField val stitcherResourceRemoved = PrinterStateReasons("stitcher-resource-removed")
        @JvmField val stitcherThermistorFailure = PrinterStateReasons("stitcher-thermistor-failure")
        @JvmField val stitcherTimingFailure = PrinterStateReasons("stitcher-timing-failure")
        @JvmField val stitcherTurnedOff = PrinterStateReasons("stitcher-turned-off")
        @JvmField val stitcherTurnedOn = PrinterStateReasons("stitcher-turned-on")
        @JvmField val stitcherUnderTemperature = PrinterStateReasons("stitcher-under-temperature")
        @JvmField val stitcherUnrecoverableFailure = PrinterStateReasons("stitcher-unrecoverable-failure")
        @JvmField val stitcherUnrecoverableStorageError = PrinterStateReasons("stitcher-unrecoverable-storage-error")
        @JvmField val stitcherWarmingUp = PrinterStateReasons("stitcher-warming-up")
        @JvmField val stoppedPartly = PrinterStateReasons("stopped-partly")
        @JvmField val stopping = PrinterStateReasons("stopping")
        @JvmField val subunitAdded = PrinterStateReasons("subunit-added")
        @JvmField val subunitAlmostEmpty = PrinterStateReasons("subunit-almost-empty")
        @JvmField val subunitAlmostFull = PrinterStateReasons("subunit-almost-full")
        @JvmField val subunitAtLimit = PrinterStateReasons("subunit-at-limit")
        @JvmField val subunitClosed = PrinterStateReasons("subunit-closed")
        @JvmField val subunitCoolingDown = PrinterStateReasons("subunit-cooling-down")
        @JvmField val subunitEmpty = PrinterStateReasons("subunit-empty")
        @JvmField val subunitFull = PrinterStateReasons("subunit-full")
        @JvmField val subunitLifeAlmostOver = PrinterStateReasons("subunit-life-almost-over")
        @JvmField val subunitLifeOver = PrinterStateReasons("subunit-life-over")
        @JvmField val subunitMemoryExhausted = PrinterStateReasons("subunit-memory-exhausted")
        @JvmField val subunitMissing = PrinterStateReasons("subunit-missing")
        @JvmField val subunitMotorFailure = PrinterStateReasons("subunit-motor-failure")
        @JvmField val subunitNearLimit = PrinterStateReasons("subunit-near-limit")
        @JvmField val subunitOffline = PrinterStateReasons("subunit-offline")
        @JvmField val subunitOpened = PrinterStateReasons("subunit-opened")
        @JvmField val subunitOverTemperature = PrinterStateReasons("subunit-over-temperature")
        @JvmField val subunitPowerSaver = PrinterStateReasons("subunit-power-saver")
        @JvmField val subunitRecoverableFailure = PrinterStateReasons("subunit-recoverable-failure")
        @JvmField val subunitRecoverableStorage = PrinterStateReasons("subunit-recoverable-storage")
        @JvmField val subunitRemoved = PrinterStateReasons("subunit-removed")
        @JvmField val subunitResourceAdded = PrinterStateReasons("subunit-resource-added")
        @JvmField val subunitResourceRemoved = PrinterStateReasons("subunit-resource-removed")
        @JvmField val subunitThermistorFailure = PrinterStateReasons("subunit-thermistor-failure")
        @JvmField val subunitTimingFailure = PrinterStateReasons("subunit-timing-Failure")
        @JvmField val subunitTurnedOff = PrinterStateReasons("subunit-turned-off")
        @JvmField val subunitTurnedOn = PrinterStateReasons("subunit-turned-on")
        @JvmField val subunitUnderTemperature = PrinterStateReasons("subunit-under-temperature")
        @JvmField val subunitUnrecoverableFailure = PrinterStateReasons("subunit-unrecoverable-failure")
        @JvmField val subunitUnrecoverableStorage = PrinterStateReasons("subunit-unrecoverable-storage")
        @JvmField val subunitWarmingUp = PrinterStateReasons("subunit-warming-up")
        @JvmField val timedOut = PrinterStateReasons("timed-out")
        @JvmField val tonerEmpty = PrinterStateReasons("toner-empty")
        @JvmField val tonerLow = PrinterStateReasons("toner-low")
        @JvmField val trimmerAdded = PrinterStateReasons("trimmer-added")
        @JvmField val trimmerAlmostEmpty = PrinterStateReasons("trimmer-almost-empty")
        @JvmField val trimmerAlmostFull = PrinterStateReasons("trimmer-almost-full")
        @JvmField val trimmerAtLimit = PrinterStateReasons("trimmer-at-limit")
        @JvmField val trimmerClosed = PrinterStateReasons("trimmer-closed")
        @JvmField val trimmerConfigurationChange = PrinterStateReasons("trimmer-configuration-change")
        @JvmField val trimmerCoverClosed = PrinterStateReasons("trimmer-cover-closed")
        @JvmField val trimmerCoverOpen = PrinterStateReasons("trimmer-cover-open")
        @JvmField val trimmerEmpty = PrinterStateReasons("trimmer-empty")
        @JvmField val trimmerFull = PrinterStateReasons("trimmer-full")
        @JvmField val trimmerInterlockClosed = PrinterStateReasons("trimmer-interlock-closed")
        @JvmField val trimmerInterlockOpen = PrinterStateReasons("trimmer-interlock-open")
        @JvmField val trimmerJam = PrinterStateReasons("trimmer-jam")
        @JvmField val trimmerLifeAlmostOver = PrinterStateReasons("trimmer-life-almost-over")
        @JvmField val trimmerLifeOver = PrinterStateReasons("trimmer-life-over")
        @JvmField val trimmerMemoryExhausted = PrinterStateReasons("trimmer-memory-exhausted")
        @JvmField val trimmerMissing = PrinterStateReasons("trimmer-missing")
        @JvmField val trimmerMotorFailure = PrinterStateReasons("trimmer-motor-failure")
        @JvmField val trimmerNearLimit = PrinterStateReasons("trimmer-near-limit")
        @JvmField val trimmerOffline = PrinterStateReasons("trimmer-offline")
        @JvmField val trimmerOpened = PrinterStateReasons("trimmer-opened")
        @JvmField val trimmerOverTemperature = PrinterStateReasons("trimmer-over-temperature")
        @JvmField val trimmerPowerSaver = PrinterStateReasons("trimmer-power-saver")
        @JvmField val trimmerRecoverableFailure = PrinterStateReasons("trimmer-recoverable-failure")
        @JvmField val trimmerRecoverableStorage = PrinterStateReasons("trimmer-recoverable-storage")
        @JvmField val trimmerRemoved = PrinterStateReasons("trimmer-removed")
        @JvmField val trimmerResourceAdded = PrinterStateReasons("trimmer-resource-added")
        @JvmField val trimmerResourceRemoved = PrinterStateReasons("trimmer-resource-removed")
        @JvmField val trimmerThermistorFailure = PrinterStateReasons("trimmer-thermistor-failure")
        @JvmField val trimmerTimingFailure = PrinterStateReasons("trimmer-timing-failure")
        @JvmField val trimmerTurnedOff = PrinterStateReasons("trimmer-turned-off")
        @JvmField val trimmerTurnedOn = PrinterStateReasons("trimmer-turned-on")
        @JvmField val trimmerUnderTemperature = PrinterStateReasons("trimmer-under-temperature")
        @JvmField val trimmerUnrecoverableFailure = PrinterStateReasons("trimmer-unrecoverable-failure")
        @JvmField val trimmerUnrecoverableStorageError = PrinterStateReasons("trimmer-unrecoverable-storage-error")
        @JvmField val trimmerWarmingUp = PrinterStateReasons("trimmer-warming-up")
        @JvmField val unknown = PrinterStateReasons("unknown")
        @JvmField val wrapperAdded = PrinterStateReasons("wrapper-added")
        @JvmField val wrapperAlmostEmpty = PrinterStateReasons("wrapper-almost-empty")
        @JvmField val wrapperAlmostFull = PrinterStateReasons("wrapper-almost-full")
        @JvmField val wrapperAtLimit = PrinterStateReasons("wrapper-at-limit")
        @JvmField val wrapperClosed = PrinterStateReasons("wrapper-closed")
        @JvmField val wrapperConfigurationChange = PrinterStateReasons("wrapper-configuration-change")
        @JvmField val wrapperCoverClosed = PrinterStateReasons("wrapper-cover-closed")
        @JvmField val wrapperCoverOpen = PrinterStateReasons("wrapper-cover-open")
        @JvmField val wrapperEmpty = PrinterStateReasons("wrapper-empty")
        @JvmField val wrapperFull = PrinterStateReasons("wrapper-full")
        @JvmField val wrapperInterlockClosed = PrinterStateReasons("wrapper-interlock-closed")
        @JvmField val wrapperInterlockOpen = PrinterStateReasons("wrapper-interlock-open")
        @JvmField val wrapperJam = PrinterStateReasons("wrapper-jam")
        @JvmField val wrapperLifeAlmostOver = PrinterStateReasons("wrapper-life-almost-over")
        @JvmField val wrapperLifeOver = PrinterStateReasons("wrapper-life-over")
        @JvmField val wrapperMemoryExhausted = PrinterStateReasons("wrapper-memory-exhausted")
        @JvmField val wrapperMissing = PrinterStateReasons("wrapper-missing")
        @JvmField val wrapperMotorFailure = PrinterStateReasons("wrapper-motor-failure")
        @JvmField val wrapperNearLimit = PrinterStateReasons("wrapper-near-limit")
        @JvmField val wrapperOffline = PrinterStateReasons("wrapper-offline")
        @JvmField val wrapperOpened = PrinterStateReasons("wrapper-opened")
        @JvmField val wrapperOverTemperature = PrinterStateReasons("wrapper-over-temperature")
        @JvmField val wrapperPowerSaver = PrinterStateReasons("wrapper-power-saver")
        @JvmField val wrapperRecoverableFailure = PrinterStateReasons("wrapper-recoverable-failure")
        @JvmField val wrapperRecoverableStorage = PrinterStateReasons("wrapper-recoverable-storage")
        @JvmField val wrapperRemoved = PrinterStateReasons("wrapper-removed")
        @JvmField val wrapperResourceAdded = PrinterStateReasons("wrapper-resource-added")
        @JvmField val wrapperResourceRemoved = PrinterStateReasons("wrapper-resource-removed")
        @JvmField val wrapperThermistorFailure = PrinterStateReasons("wrapper-thermistor-failure")
        @JvmField val wrapperTimingFailure = PrinterStateReasons("wrapper-timing-failure")
        @JvmField val wrapperTurnedOff = PrinterStateReasons("wrapper-turned-off")
        @JvmField val wrapperTurnedOn = PrinterStateReasons("wrapper-turned-on")
        @JvmField val wrapperUnderTemperature = PrinterStateReasons("wrapper-under-temperature")
        @JvmField val wrapperUnrecoverableFailure = PrinterStateReasons("wrapper-unrecoverable-failure")
        @JvmField val wrapperUnrecoverableStorageError = PrinterStateReasons("wrapper-unrecoverable-storage-error")
        @JvmField val wrapperWarmingUp = PrinterStateReasons("wrapper-warming-up")
        @JvmField val Encoder = KeywordType.encoderOf(PrinterStateReasons::class.java) { value, _, _ ->
            PrinterStateReasons(value)
        }
    }
}
