// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.Keyword
import com.hp.jipp.encoding.KeywordType

/**
 * "printer-state-reasons" keyword as defined in
 * [HPINC20180215](http://www.pwg.org/pipermail/ipp/2018/019504.html),
 * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf),
 * [PWG5100.18](http://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf),
 * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf),
 * [PWG5100.9](http://ftp.pwg.org/pub/pwg/candidates/cs-ippstate10-20090731-5100.9.pdf),
 * [RFC3998](http://www.iana.org/go/rfc3998),
 * [RFC8011](http://www.iana.org/go/rfc8011).
 */
data class PrinterStateReason(
    override val value: String
) : Keyword() {

    override fun toString() = value

    /** An attribute type for [PrinterStateReason] attributes */
    class Type(name: String) : KeywordType<PrinterStateReason>(Encoder, name)

    companion object {
        @JvmField val alertRemovalOfBinaryChangeEntry = PrinterStateReason("alert-removal-of-binary-change-entry")
        @JvmField val banderAdded = PrinterStateReason("bander-added")
        @JvmField val banderAlmostEmpty = PrinterStateReason("bander-almost-empty")
        @JvmField val banderAlmostFull = PrinterStateReason("bander-almost-full")
        @JvmField val banderAtLimit = PrinterStateReason("bander-at-limit")
        @JvmField val banderClosed = PrinterStateReason("bander-closed")
        @JvmField val banderConfigurationChange = PrinterStateReason("bander-configuration-change")
        @JvmField val banderCoverClosed = PrinterStateReason("bander-cover-closed")
        @JvmField val banderCoverOpen = PrinterStateReason("bander-cover-open")
        @JvmField val banderEmpty = PrinterStateReason("bander-empty")
        @JvmField val banderFull = PrinterStateReason("bander-full")
        @JvmField val banderInterlockClosed = PrinterStateReason("bander-interlock-closed")
        @JvmField val banderInterlockOpen = PrinterStateReason("bander-interlock-open")
        @JvmField val banderJam = PrinterStateReason("bander-jam")
        @JvmField val banderLifeAlmostOver = PrinterStateReason("bander-life-almost-over")
        @JvmField val banderLifeOver = PrinterStateReason("bander-life-over")
        @JvmField val banderMemoryExhausted = PrinterStateReason("bander-memory-exhausted")
        @JvmField val banderMissing = PrinterStateReason("bander-missing")
        @JvmField val banderMotorFailure = PrinterStateReason("bander-motor-failure")
        @JvmField val banderNearLimit = PrinterStateReason("bander-near-limit")
        @JvmField val banderOffline = PrinterStateReason("bander-offline")
        @JvmField val banderOpened = PrinterStateReason("bander-opened")
        @JvmField val banderOverTemperature = PrinterStateReason("bander-over-temperature")
        @JvmField val banderPowerSaver = PrinterStateReason("bander-power-saver")
        @JvmField val banderRecoverableFailure = PrinterStateReason("bander-recoverable-failure")
        @JvmField val banderRecoverableStorage = PrinterStateReason("bander-recoverable-storage")
        @JvmField val banderRemoved = PrinterStateReason("bander-removed")
        @JvmField val banderResourceAdded = PrinterStateReason("bander-resource-added")
        @JvmField val banderResourceRemoved = PrinterStateReason("bander-resource-removed")
        @JvmField val banderThermistorFailure = PrinterStateReason("bander-thermistor-failure")
        @JvmField val banderTimingFailure = PrinterStateReason("bander-timing-failure")
        @JvmField val banderTurnedOff = PrinterStateReason("bander-turned-off")
        @JvmField val banderTurnedOn = PrinterStateReason("bander-turned-on")
        @JvmField val banderUnderTemperature = PrinterStateReason("bander-under-temperature")
        @JvmField val banderUnrecoverableFailure = PrinterStateReason("bander-unrecoverable-failure")
        @JvmField val banderUnrecoverableStorageError = PrinterStateReason("bander-unrecoverable-storage-error")
        @JvmField val banderWarmingUp = PrinterStateReason("bander-warming-up")
        @JvmField val binderAdded = PrinterStateReason("binder-added")
        @JvmField val binderAlmostEmpty = PrinterStateReason("binder-almost-empty")
        @JvmField val binderAlmostFull = PrinterStateReason("binder-almost-full")
        @JvmField val binderAtLimit = PrinterStateReason("binder-at-limit")
        @JvmField val binderClosed = PrinterStateReason("binder-closed")
        @JvmField val binderConfigurationChange = PrinterStateReason("binder-configuration-change")
        @JvmField val binderCoverClosed = PrinterStateReason("binder-cover-closed")
        @JvmField val binderCoverOpen = PrinterStateReason("binder-cover-open")
        @JvmField val binderEmpty = PrinterStateReason("binder-empty")
        @JvmField val binderFull = PrinterStateReason("binder-full")
        @JvmField val binderInterlockClosed = PrinterStateReason("binder-interlock-closed")
        @JvmField val binderInterlockOpen = PrinterStateReason("binder-interlock-open")
        @JvmField val binderJam = PrinterStateReason("binder-jam")
        @JvmField val binderLifeAlmostOver = PrinterStateReason("binder-life-almost-over")
        @JvmField val binderLifeOver = PrinterStateReason("binder-life-over")
        @JvmField val binderMemoryExhausted = PrinterStateReason("binder-memory-exhausted")
        @JvmField val binderMissing = PrinterStateReason("binder-missing")
        @JvmField val binderMotorFailure = PrinterStateReason("binder-motor-failure")
        @JvmField val binderNearLimit = PrinterStateReason("binder-near-limit")
        @JvmField val binderOffline = PrinterStateReason("binder-offline")
        @JvmField val binderOpened = PrinterStateReason("binder-opened")
        @JvmField val binderOverTemperature = PrinterStateReason("binder-over-temperature")
        @JvmField val binderPowerSaver = PrinterStateReason("binder-power-saver")
        @JvmField val binderRecoverableFailure = PrinterStateReason("binder-recoverable-failure")
        @JvmField val binderRecoverableStorage = PrinterStateReason("binder-recoverable-storage")
        @JvmField val binderRemoved = PrinterStateReason("binder-removed")
        @JvmField val binderResourceAdded = PrinterStateReason("binder-resource-added")
        @JvmField val binderResourceRemoved = PrinterStateReason("binder-resource-removed")
        @JvmField val binderThermistorFailure = PrinterStateReason("binder-thermistor-failure")
        @JvmField val binderTimingFailure = PrinterStateReason("binder-timing-failure")
        @JvmField val binderTurnedOff = PrinterStateReason("binder-turned-off")
        @JvmField val binderTurnedOn = PrinterStateReason("binder-turned-on")
        @JvmField val binderUnderTemperature = PrinterStateReason("binder-under-temperature")
        @JvmField val binderUnrecoverableFailure = PrinterStateReason("binder-unrecoverable-failure")
        @JvmField val binderUnrecoverableStorageError = PrinterStateReason("binder-unrecoverable-storage-error")
        @JvmField val binderWarmingUp = PrinterStateReason("binder-warming-up")
        @JvmField val cameraFailure = PrinterStateReason("camera-failure")
        @JvmField val chamberCooling = PrinterStateReason("chamber-cooling")
        @JvmField val chamberFailure = PrinterStateReason("chamber-failure")
        @JvmField val chamberHeating = PrinterStateReason("chamber-heating")
        @JvmField val chamberTemperatureHigh = PrinterStateReason("chamber-temperature-high")
        @JvmField val chamberTemperatureLow = PrinterStateReason("chamber-temperature-low")
        @JvmField val cleanerLifeAlmostOver = PrinterStateReason("cleaner-life-almost-over")
        @JvmField val cleanerLifeOver = PrinterStateReason("cleaner-life-over")
        @JvmField val configurationChange = PrinterStateReason("configuration-change")
        @JvmField val connectingToDevice = PrinterStateReason("connecting-to-device")
        @JvmField val coverOpen = PrinterStateReason("cover-open")
        @JvmField val deactivated = PrinterStateReason("deactivated")
        @JvmField val developerEmpty = PrinterStateReason("developer-empty")
        @JvmField val developerLow = PrinterStateReason("developer-low")
        @JvmField val dieCutterAdded = PrinterStateReason("die-cutter-added")
        @JvmField val dieCutterAlmostEmpty = PrinterStateReason("die-cutter-almost-empty")
        @JvmField val dieCutterAlmostFull = PrinterStateReason("die-cutter-almost-full")
        @JvmField val dieCutterAtLimit = PrinterStateReason("die-cutter-at-limit")
        @JvmField val dieCutterClosed = PrinterStateReason("die-cutter-closed")
        @JvmField val dieCutterConfigurationChange = PrinterStateReason("die-cutter-configuration-change")
        @JvmField val dieCutterCoverClosed = PrinterStateReason("die-cutter-cover-closed")
        @JvmField val dieCutterCoverOpen = PrinterStateReason("die-cutter-cover-open")
        @JvmField val dieCutterEmpty = PrinterStateReason("die-cutter-empty")
        @JvmField val dieCutterFull = PrinterStateReason("die-cutter-full")
        @JvmField val dieCutterInterlockClosed = PrinterStateReason("die-cutter-interlock-closed")
        @JvmField val dieCutterInterlockOpen = PrinterStateReason("die-cutter-interlock-open")
        @JvmField val dieCutterJam = PrinterStateReason("die-cutter-jam")
        @JvmField val dieCutterLifeAlmostOver = PrinterStateReason("die-cutter-life-almost-over")
        @JvmField val dieCutterLifeOver = PrinterStateReason("die-cutter-life-over")
        @JvmField val dieCutterMemoryExhausted = PrinterStateReason("die-cutter-memory-exhausted")
        @JvmField val dieCutterMissing = PrinterStateReason("die-cutter-missing")
        @JvmField val dieCutterMotorFailure = PrinterStateReason("die-cutter-motor-failure")
        @JvmField val dieCutterNearLimit = PrinterStateReason("die-cutter-near-limit")
        @JvmField val dieCutterOffline = PrinterStateReason("die-cutter-offline")
        @JvmField val dieCutterOpened = PrinterStateReason("die-cutter-opened")
        @JvmField val dieCutterOverTemperature = PrinterStateReason("die-cutter-over-temperature")
        @JvmField val dieCutterPowerSaver = PrinterStateReason("die-cutter-power-saver")
        @JvmField val dieCutterRecoverableFailure = PrinterStateReason("die-cutter-recoverable-failure")
        @JvmField val dieCutterRecoverableStorage = PrinterStateReason("die-cutter-recoverable-storage")
        @JvmField val dieCutterRemoved = PrinterStateReason("die-cutter-removed")
        @JvmField val dieCutterResourceAdded = PrinterStateReason("die-cutter-resource-added")
        @JvmField val dieCutterResourceRemoved = PrinterStateReason("die-cutter-resource-removed")
        @JvmField val dieCutterThermistorFailure = PrinterStateReason("die-cutter-thermistor-failure")
        @JvmField val dieCutterTimingFailure = PrinterStateReason("die-cutter-timing-failure")
        @JvmField val dieCutterTurnedOff = PrinterStateReason("die-cutter-turned-off")
        @JvmField val dieCutterTurnedOn = PrinterStateReason("die-cutter-turned-on")
        @JvmField val dieCutterUnderTemperature = PrinterStateReason("die-cutter-under-temperature")
        @JvmField val dieCutterUnrecoverableFailure = PrinterStateReason("die-cutter-unrecoverable-failure")
        @JvmField val dieCutterUnrecoverableStorageError = PrinterStateReason("die-cutter-unrecoverable-storage-error")
        @JvmField val dieCutterWarmingUp = PrinterStateReason("die-cutter-warming-up")
        @JvmField val doorOpen = PrinterStateReason("door-open")
        @JvmField val extruderCooling = PrinterStateReason("extruder-cooling")
        @JvmField val extruderFailure = PrinterStateReason("extruder-failure")
        @JvmField val extruderHeating = PrinterStateReason("extruder-heating")
        @JvmField val extruderJam = PrinterStateReason("extruder-jam")
        @JvmField val extruderTemperatureHigh = PrinterStateReason("extruder-temperature-high")
        @JvmField val extruderTemperatureLow = PrinterStateReason("extruder-temperature-low")
        @JvmField val fanFailure = PrinterStateReason("fan-failure")
        @JvmField val folderAdded = PrinterStateReason("folder-added")
        @JvmField val folderAlmostEmpty = PrinterStateReason("folder-almost-empty")
        @JvmField val folderAlmostFull = PrinterStateReason("folder-almost-full")
        @JvmField val folderAtLimit = PrinterStateReason("folder-at-limit")
        @JvmField val folderClosed = PrinterStateReason("folder-closed")
        @JvmField val folderConfigurationChange = PrinterStateReason("folder-configuration-change")
        @JvmField val folderCoverClosed = PrinterStateReason("folder-cover-closed")
        @JvmField val folderCoverOpen = PrinterStateReason("folder-cover-open")
        @JvmField val folderEmpty = PrinterStateReason("folder-empty")
        @JvmField val folderFull = PrinterStateReason("folder-full")
        @JvmField val folderInterlockClosed = PrinterStateReason("folder-interlock-closed")
        @JvmField val folderInterlockOpen = PrinterStateReason("folder-interlock-open")
        @JvmField val folderJam = PrinterStateReason("folder-jam")
        @JvmField val folderLifeAlmostOver = PrinterStateReason("folder-life-almost-over")
        @JvmField val folderLifeOver = PrinterStateReason("folder-life-over")
        @JvmField val folderMemoryExhausted = PrinterStateReason("folder-memory-exhausted")
        @JvmField val folderMissing = PrinterStateReason("folder-missing")
        @JvmField val folderMotorFailure = PrinterStateReason("folder-motor-failure")
        @JvmField val folderNearLimit = PrinterStateReason("folder-near-limit")
        @JvmField val folderOffline = PrinterStateReason("folder-offline")
        @JvmField val folderOpened = PrinterStateReason("folder-opened")
        @JvmField val folderOverTemperature = PrinterStateReason("folder-over-temperature")
        @JvmField val folderPowerSaver = PrinterStateReason("folder-power-saver")
        @JvmField val folderRecoverableFailure = PrinterStateReason("folder-recoverable-failure")
        @JvmField val folderRecoverableStorage = PrinterStateReason("folder-recoverable-storage")
        @JvmField val folderRemoved = PrinterStateReason("folder-removed")
        @JvmField val folderResourceAdded = PrinterStateReason("folder-resource-added")
        @JvmField val folderResourceRemoved = PrinterStateReason("folder-resource-removed")
        @JvmField val folderThermistorFailure = PrinterStateReason("folder-thermistor-failure")
        @JvmField val folderTimingFailure = PrinterStateReason("folder-timing-failure")
        @JvmField val folderTurnedOff = PrinterStateReason("folder-turned-off")
        @JvmField val folderTurnedOn = PrinterStateReason("folder-turned-on")
        @JvmField val folderUnderTemperature = PrinterStateReason("folder-under-temperature")
        @JvmField val folderUnrecoverableFailure = PrinterStateReason("folder-unrecoverable-failure")
        @JvmField val folderUnrecoverableStorageError = PrinterStateReason("folder-unrecoverable-storage-error")
        @JvmField val folderWarmingUp = PrinterStateReason("folder-warming-up")
        @JvmField val fuserOverTemp = PrinterStateReason("fuser-over-temp")
        @JvmField val fuserUnderTemp = PrinterStateReason("fuser-under-temp")
        @JvmField val holdNewJobs = PrinterStateReason("hold-new-jobs")
        @JvmField val identifyPrinterRequested = PrinterStateReason("identify-printer-requested")
        @JvmField val imprinterAdded = PrinterStateReason("imprinter-added")
        @JvmField val imprinterAlmostEmpty = PrinterStateReason("imprinter-almost-empty")
        @JvmField val imprinterAlmostFull = PrinterStateReason("imprinter-almost-full")
        @JvmField val imprinterAtLimit = PrinterStateReason("imprinter-at-limit")
        @JvmField val imprinterClosed = PrinterStateReason("imprinter-closed")
        @JvmField val imprinterConfigurationChange = PrinterStateReason("imprinter-configuration-change")
        @JvmField val imprinterCoverClosed = PrinterStateReason("imprinter-cover-closed")
        @JvmField val imprinterCoverOpen = PrinterStateReason("imprinter-cover-open")
        @JvmField val imprinterEmpty = PrinterStateReason("imprinter-empty")
        @JvmField val imprinterFull = PrinterStateReason("imprinter-full")
        @JvmField val imprinterInterlockClosed = PrinterStateReason("imprinter-interlock-closed")
        @JvmField val imprinterInterlockOpen = PrinterStateReason("imprinter-interlock-open")
        @JvmField val imprinterJam = PrinterStateReason("imprinter-jam")
        @JvmField val imprinterLifeAlmostOver = PrinterStateReason("imprinter-life-almost-over")
        @JvmField val imprinterLifeOver = PrinterStateReason("imprinter-life-over")
        @JvmField val imprinterMemoryExhausted = PrinterStateReason("imprinter-memory-exhausted")
        @JvmField val imprinterMissing = PrinterStateReason("imprinter-missing")
        @JvmField val imprinterMotorFailure = PrinterStateReason("imprinter-motor-failure")
        @JvmField val imprinterNearLimit = PrinterStateReason("imprinter-near-limit")
        @JvmField val imprinterOffline = PrinterStateReason("imprinter-offline")
        @JvmField val imprinterOpened = PrinterStateReason("imprinter-opened")
        @JvmField val imprinterOverTemperature = PrinterStateReason("imprinter-over-temperature")
        @JvmField val imprinterPowerSaver = PrinterStateReason("imprinter-power-saver")
        @JvmField val imprinterRecoverableFailure = PrinterStateReason("imprinter-recoverable-failure")
        @JvmField val imprinterRecoverableStorage = PrinterStateReason("imprinter-recoverable-storage")
        @JvmField val imprinterRemoved = PrinterStateReason("imprinter-removed")
        @JvmField val imprinterResourceAdded = PrinterStateReason("imprinter-resource-added")
        @JvmField val imprinterResourceRemoved = PrinterStateReason("imprinter-resource-removed")
        @JvmField val imprinterThermistorFailure = PrinterStateReason("imprinter-thermistor-failure")
        @JvmField val imprinterTimingFailure = PrinterStateReason("imprinter-timing-failure")
        @JvmField val imprinterTurnedOff = PrinterStateReason("imprinter-turned-off")
        @JvmField val imprinterTurnedOn = PrinterStateReason("imprinter-turned-on")
        @JvmField val imprinterUnderTemperature = PrinterStateReason("imprinter-under-temperature")
        @JvmField val imprinterUnrecoverableFailure = PrinterStateReason("imprinter-unrecoverable-failure")
        @JvmField val imprinterUnrecoverableStorageError = PrinterStateReason("imprinter-unrecoverable-storage-error")
        @JvmField val imprinterWarmingUp = PrinterStateReason("imprinter-warming-up")
        @JvmField val inputCannotFeedSizeSelected = PrinterStateReason("input-cannot-feed-size-selected")
        @JvmField val inputManualInputRequest = PrinterStateReason("input-manual-input-request")
        @JvmField val inputMediaColorChange = PrinterStateReason("input-media-color-change")
        @JvmField val inputMediaFormPartsChange = PrinterStateReason("input-media-form-parts-change")
        @JvmField val inputMediaSizeChange = PrinterStateReason("input-media-size-change")
        @JvmField val inputMediaTypeChange = PrinterStateReason("input-media-type-change")
        @JvmField val inputMediaWeightChange = PrinterStateReason("input-media-weight-change")
        @JvmField val inputTrayElevationFailure = PrinterStateReason("input-tray-elevation-failure")
        @JvmField val inputTrayMissing = PrinterStateReason("input-tray-missing")
        @JvmField val inputTrayPositionFailure = PrinterStateReason("input-tray-position-failure")
        @JvmField val inserterAdded = PrinterStateReason("inserter-added")
        @JvmField val inserterAlmostEmpty = PrinterStateReason("inserter-almost-empty")
        @JvmField val inserterAlmostFull = PrinterStateReason("inserter-almost-full")
        @JvmField val inserterAtLimit = PrinterStateReason("inserter-at-limit")
        @JvmField val inserterClosed = PrinterStateReason("inserter-closed")
        @JvmField val inserterConfigurationChange = PrinterStateReason("inserter-configuration-change")
        @JvmField val inserterCoverClosed = PrinterStateReason("inserter-cover-closed")
        @JvmField val inserterCoverOpen = PrinterStateReason("inserter-cover-open")
        @JvmField val inserterEmpty = PrinterStateReason("inserter-empty")
        @JvmField val inserterFull = PrinterStateReason("inserter-full")
        @JvmField val inserterInterlockClosed = PrinterStateReason("inserter-interlock-closed")
        @JvmField val inserterInterlockOpen = PrinterStateReason("inserter-interlock-open")
        @JvmField val inserterJam = PrinterStateReason("inserter-jam")
        @JvmField val inserterLifeAlmostOver = PrinterStateReason("inserter-life-almost-over")
        @JvmField val inserterLifeOver = PrinterStateReason("inserter-life-over")
        @JvmField val inserterMemoryExhausted = PrinterStateReason("inserter-memory-exhausted")
        @JvmField val inserterMissing = PrinterStateReason("inserter-missing")
        @JvmField val inserterMotorFailure = PrinterStateReason("inserter-motor-failure")
        @JvmField val inserterNearLimit = PrinterStateReason("inserter-near-limit")
        @JvmField val inserterOffline = PrinterStateReason("inserter-offline")
        @JvmField val inserterOpened = PrinterStateReason("inserter-opened")
        @JvmField val inserterOverTemperature = PrinterStateReason("inserter-over-temperature")
        @JvmField val inserterPowerSaver = PrinterStateReason("inserter-power-saver")
        @JvmField val inserterRecoverableFailure = PrinterStateReason("inserter-recoverable-failure")
        @JvmField val inserterRecoverableStorage = PrinterStateReason("inserter-recoverable-storage")
        @JvmField val inserterRemoved = PrinterStateReason("inserter-removed")
        @JvmField val inserterResourceAdded = PrinterStateReason("inserter-resource-added")
        @JvmField val inserterResourceRemoved = PrinterStateReason("inserter-resource-removed")
        @JvmField val inserterThermistorFailure = PrinterStateReason("inserter-thermistor-failure")
        @JvmField val inserterTimingFailure = PrinterStateReason("inserter-timing-failure")
        @JvmField val inserterTurnedOff = PrinterStateReason("inserter-turned-off")
        @JvmField val inserterTurnedOn = PrinterStateReason("inserter-turned-on")
        @JvmField val inserterUnderTemperature = PrinterStateReason("inserter-under-temperature")
        @JvmField val inserterUnrecoverableFailure = PrinterStateReason("inserter-unrecoverable-failure")
        @JvmField val inserterUnrecoverableStorageError = PrinterStateReason("inserter-unrecoverable-storage-error")
        @JvmField val inserterWarmingUp = PrinterStateReason("inserter-warming-up")
        @JvmField val interlockClosed = PrinterStateReason("interlock-closed")
        @JvmField val interlockOpen = PrinterStateReason("interlock-open")
        @JvmField val interpreterCartridgeAdded = PrinterStateReason("interpreter-cartridge-added")
        @JvmField val interpreterCartridgeDeleted = PrinterStateReason("interpreter-cartridge-deleted")
        @JvmField val interpreterComplexPageEncountered = PrinterStateReason("interpreter-complex-page-encountered")
        @JvmField val interpreterMemoryDecrease = PrinterStateReason("interpreter-memory-decrease")
        @JvmField val interpreterMemoryIncrease = PrinterStateReason("interpreter-memory-increase")
        @JvmField val interpreterResourceAdded = PrinterStateReason("interpreter-resource-added")
        @JvmField val interpreterResourceDeleted = PrinterStateReason("interpreter-resource-deleted")
        @JvmField val interpreterResourceUnavailable = PrinterStateReason("interpreter-resource-unavailable")
        @JvmField val lampAtEol = PrinterStateReason("lamp-at-eol")
        @JvmField val lampFailure = PrinterStateReason("lamp-failure")
        @JvmField val lampNearEol = PrinterStateReason("lamp-near-eol")
        @JvmField val laserAtEol = PrinterStateReason("laser-at-eol")
        @JvmField val laserFailure = PrinterStateReason("laser-failure")
        @JvmField val laserNearEol = PrinterStateReason("laser-near-eol")
        @JvmField val makeEnvelopeAdded = PrinterStateReason("make-envelope-added")
        @JvmField val makeEnvelopeAlmostEmpty = PrinterStateReason("make-envelope-almost-empty")
        @JvmField val makeEnvelopeAlmostFull = PrinterStateReason("make-envelope-almost-full")
        @JvmField val makeEnvelopeAtLimit = PrinterStateReason("make-envelope-at-limit")
        @JvmField val makeEnvelopeClosed = PrinterStateReason("make-envelope-closed")
        @JvmField val makeEnvelopeConfigurationChange = PrinterStateReason("make-envelope-configuration-change")
        @JvmField val makeEnvelopeCoverClosed = PrinterStateReason("make-envelope-cover-closed")
        @JvmField val makeEnvelopeCoverOpen = PrinterStateReason("make-envelope-cover-open")
        @JvmField val makeEnvelopeEmpty = PrinterStateReason("make-envelope-empty")
        @JvmField val makeEnvelopeFull = PrinterStateReason("make-envelope-full")
        @JvmField val makeEnvelopeInterlockClosed = PrinterStateReason("make-envelope-interlock-closed")
        @JvmField val makeEnvelopeInterlockOpen = PrinterStateReason("make-envelope-interlock-open")
        @JvmField val makeEnvelopeJam = PrinterStateReason("make-envelope-jam")
        @JvmField val makeEnvelopeLifeAlmostOver = PrinterStateReason("make-envelope-life-almost-over")
        @JvmField val makeEnvelopeLifeOver = PrinterStateReason("make-envelope-life-over")
        @JvmField val makeEnvelopeMemoryExhausted = PrinterStateReason("make-envelope-memory-exhausted")
        @JvmField val makeEnvelopeMissing = PrinterStateReason("make-envelope-missing")
        @JvmField val makeEnvelopeMotorFailure = PrinterStateReason("make-envelope-motor-failure")
        @JvmField val makeEnvelopeNearLimit = PrinterStateReason("make-envelope-near-limit")
        @JvmField val makeEnvelopeOffline = PrinterStateReason("make-envelope-offline")
        @JvmField val makeEnvelopeOpened = PrinterStateReason("make-envelope-opened")
        @JvmField val makeEnvelopeOverTemperature = PrinterStateReason("make-envelope-over-temperature")
        @JvmField val makeEnvelopePowerSaver = PrinterStateReason("make-envelope-power-saver")
        @JvmField val makeEnvelopeRecoverableFailure = PrinterStateReason("make-envelope-recoverable-failure")
        @JvmField val makeEnvelopeRecoverableStorage = PrinterStateReason("make-envelope-recoverable-storage")
        @JvmField val makeEnvelopeRemoved = PrinterStateReason("make-envelope-removed")
        @JvmField val makeEnvelopeResourceAdded = PrinterStateReason("make-envelope-resource-added")
        @JvmField val makeEnvelopeResourceRemoved = PrinterStateReason("make-envelope-resource-removed")
        @JvmField val makeEnvelopeThermistorFailure = PrinterStateReason("make-envelope-thermistor-failure")
        @JvmField val makeEnvelopeTimingFailure = PrinterStateReason("make-envelope-timing-failure")
        @JvmField val makeEnvelopeTurnedOff = PrinterStateReason("make-envelope-turned-off")
        @JvmField val makeEnvelopeTurnedOn = PrinterStateReason("make-envelope-turned-on")
        @JvmField val makeEnvelopeUnderTemperature = PrinterStateReason("make-envelope-under-temperature")
        @JvmField val makeEnvelopeUnrecoverableFailure = PrinterStateReason("make-envelope-unrecoverable-failure")
        @JvmField val makeEnvelopeUnrecoverableStorageError = PrinterStateReason("make-envelope-unrecoverable-storage-error")
        @JvmField val makeEnvelopeWarmingUp = PrinterStateReason("make-envelope-warming-up")
        @JvmField val markerAdjustingPrintQuality = PrinterStateReason("marker-adjusting-print-quality")
        @JvmField val markerDeveloperAlmostEmpty = PrinterStateReason("marker-developer-almost-empty")
        @JvmField val markerDeveloperEmpty = PrinterStateReason("marker-developer-empty")
        @JvmField val markerFuserThermistorFailure = PrinterStateReason("marker-fuser-thermistor-failure")
        @JvmField val markerFuserTimingFailure = PrinterStateReason("marker-fuser-timing-failure")
        @JvmField val markerInkAlmostEmpty = PrinterStateReason("marker-ink-almost-empty")
        @JvmField val markerInkEmpty = PrinterStateReason("marker-ink-empty")
        @JvmField val markerPrintRibbonAlmostEmpty = PrinterStateReason("marker-print-ribbon-almost-empty")
        @JvmField val markerPrintRibbonEmpty = PrinterStateReason("marker-print-ribbon-empty")
        @JvmField val markerSupplyEmpty = PrinterStateReason("marker-supply-empty")
        @JvmField val markerSupplyLow = PrinterStateReason("marker-supply-low")
        @JvmField val markerTonerCartridgeMissing = PrinterStateReason("marker-toner-cartridge-missing")
        @JvmField val markerWasteAlmostFull = PrinterStateReason("marker-waste-almost-full")
        @JvmField val markerWasteFull = PrinterStateReason("marker-waste-full")
        @JvmField val markerWasteInkReceptacleAlmostFull = PrinterStateReason("marker-waste-ink-receptacle-almost-full")
        @JvmField val markerWasteInkReceptacleFull = PrinterStateReason("marker-waste-ink-receptacle-full")
        @JvmField val markerWasteTonerReceptacleAlmostFull = PrinterStateReason("marker-waste-toner-receptacle-almost-full")
        @JvmField val markerWasteTonerReceptacleFull = PrinterStateReason("marker-waste-toner-receptacle-full")
        @JvmField val materialEmpty = PrinterStateReason("material-empty")
        @JvmField val materialLow = PrinterStateReason("material-low")
        @JvmField val materialNeeded = PrinterStateReason("material-needed")
        @JvmField val mediaEmpty = PrinterStateReason("media-empty")
        @JvmField val mediaJam = PrinterStateReason("media-jam")
        @JvmField val mediaLow = PrinterStateReason("media-low")
        @JvmField val mediaNeeded = PrinterStateReason("media-needed")
        @JvmField val mediaPathCannotDuplexMediaSelected = PrinterStateReason("media-path-cannot-duplex-media-selected")
        @JvmField val mediaPathMediaTrayAlmostFull = PrinterStateReason("media-path-media-tray-almost-full")
        @JvmField val mediaPathMediaTrayFull = PrinterStateReason("media-path-media-tray-full")
        @JvmField val mediaPathMediaTrayMissing = PrinterStateReason("media-path-media-tray-missing")
        @JvmField val motorFailure = PrinterStateReason("motor-failure")
        @JvmField val movingToPaused = PrinterStateReason("moving-to-paused")
        @JvmField val none = PrinterStateReason("none")
        @JvmField val opcLifeOver = PrinterStateReason("opc-life-over")
        @JvmField val opcNearEol = PrinterStateReason("opc-near-eol")
        @JvmField val other = PrinterStateReason("other")
        @JvmField val outputAreaAlmostFull = PrinterStateReason("output-area-almost-full")
        @JvmField val outputAreaFull = PrinterStateReason("output-area-full")
        @JvmField val outputMailboxSelectFailure = PrinterStateReason("output-mailbox-select-failure")
        @JvmField val outputTrayMissing = PrinterStateReason("output-tray-missing")
        @JvmField val paused = PrinterStateReason("paused")
        @JvmField val perforaterAdded = PrinterStateReason("perforater-added")
        @JvmField val perforaterAlmostEmpty = PrinterStateReason("perforater-almost-empty")
        @JvmField val perforaterAlmostFull = PrinterStateReason("perforater-almost-full")
        @JvmField val perforaterAtLimit = PrinterStateReason("perforater-at-limit")
        @JvmField val perforaterClosed = PrinterStateReason("perforater-closed")
        @JvmField val perforaterConfigurationChange = PrinterStateReason("perforater-configuration-change")
        @JvmField val perforaterCoverClosed = PrinterStateReason("perforater-cover-closed")
        @JvmField val perforaterCoverOpen = PrinterStateReason("perforater-cover-open")
        @JvmField val perforaterEmpty = PrinterStateReason("perforater-empty")
        @JvmField val perforaterFull = PrinterStateReason("perforater-full")
        @JvmField val perforaterInterlockClosed = PrinterStateReason("perforater-interlock-closed")
        @JvmField val perforaterInterlockOpen = PrinterStateReason("perforater-interlock-open")
        @JvmField val perforaterJam = PrinterStateReason("perforater-jam")
        @JvmField val perforaterLifeAlmostOver = PrinterStateReason("perforater-life-almost-over")
        @JvmField val perforaterLifeOver = PrinterStateReason("perforater-life-over")
        @JvmField val perforaterMemoryExhausted = PrinterStateReason("perforater-memory-exhausted")
        @JvmField val perforaterMissing = PrinterStateReason("perforater-missing")
        @JvmField val perforaterMotorFailure = PrinterStateReason("perforater-motor-failure")
        @JvmField val perforaterNearLimit = PrinterStateReason("perforater-near-limit")
        @JvmField val perforaterOffline = PrinterStateReason("perforater-offline")
        @JvmField val perforaterOpened = PrinterStateReason("perforater-opened")
        @JvmField val perforaterOverTemperature = PrinterStateReason("perforater-over-temperature")
        @JvmField val perforaterPowerSaver = PrinterStateReason("perforater-power-saver")
        @JvmField val perforaterRecoverableFailure = PrinterStateReason("perforater-recoverable-failure")
        @JvmField val perforaterRecoverableStorage = PrinterStateReason("perforater-recoverable-storage")
        @JvmField val perforaterRemoved = PrinterStateReason("perforater-removed")
        @JvmField val perforaterResourceAdded = PrinterStateReason("perforater-resource-added")
        @JvmField val perforaterResourceRemoved = PrinterStateReason("perforater-resource-removed")
        @JvmField val perforaterThermistorFailure = PrinterStateReason("perforater-thermistor-failure")
        @JvmField val perforaterTimingFailure = PrinterStateReason("perforater-timing-failure")
        @JvmField val perforaterTurnedOff = PrinterStateReason("perforater-turned-off")
        @JvmField val perforaterTurnedOn = PrinterStateReason("perforater-turned-on")
        @JvmField val perforaterUnderTemperature = PrinterStateReason("perforater-under-temperature")
        @JvmField val perforaterUnrecoverableFailure = PrinterStateReason("perforater-unrecoverable-failure")
        @JvmField val perforaterUnrecoverableStorageError = PrinterStateReason("perforater-unrecoverable-storage-error")
        @JvmField val perforaterWarmingUp = PrinterStateReason("perforater-warming-up")
        @JvmField val platformCooling = PrinterStateReason("platform-cooling")
        @JvmField val platformFailure = PrinterStateReason("platform-failure")
        @JvmField val platformHeating = PrinterStateReason("platform-heating")
        @JvmField val platformTemperatureHigh = PrinterStateReason("platform-temperature-high")
        @JvmField val platformTemperatureLow = PrinterStateReason("platform-temperature-low")
        @JvmField val powerDown = PrinterStateReason("power-down")
        @JvmField val powerUp = PrinterStateReason("power-up")
        @JvmField val printerManualReset = PrinterStateReason("printer-manual-reset")
        @JvmField val printerNmsReset = PrinterStateReason("printer-nms-reset")
        @JvmField val printerReadyToPrint = PrinterStateReason("printer-ready-to-print")
        @JvmField val puncherAdded = PrinterStateReason("puncher-added")
        @JvmField val puncherAlmostEmpty = PrinterStateReason("puncher-almost-empty")
        @JvmField val puncherAlmostFull = PrinterStateReason("puncher-almost-full")
        @JvmField val puncherAtLimit = PrinterStateReason("puncher-at-limit")
        @JvmField val puncherClosed = PrinterStateReason("puncher-closed")
        @JvmField val puncherConfigurationChange = PrinterStateReason("puncher-configuration-change")
        @JvmField val puncherCoverClosed = PrinterStateReason("puncher-cover-closed")
        @JvmField val puncherCoverOpen = PrinterStateReason("puncher-cover-open")
        @JvmField val puncherEmpty = PrinterStateReason("puncher-empty")
        @JvmField val puncherFull = PrinterStateReason("puncher-full")
        @JvmField val puncherInterlockClosed = PrinterStateReason("puncher-interlock-closed")
        @JvmField val puncherInterlockOpen = PrinterStateReason("puncher-interlock-open")
        @JvmField val puncherJam = PrinterStateReason("puncher-jam")
        @JvmField val puncherLifeAlmostOver = PrinterStateReason("puncher-life-almost-over")
        @JvmField val puncherLifeOver = PrinterStateReason("puncher-life-over")
        @JvmField val puncherMemoryExhausted = PrinterStateReason("puncher-memory-exhausted")
        @JvmField val puncherMissing = PrinterStateReason("puncher-missing")
        @JvmField val puncherMotorFailure = PrinterStateReason("puncher-motor-failure")
        @JvmField val puncherNearLimit = PrinterStateReason("puncher-near-limit")
        @JvmField val puncherOffline = PrinterStateReason("puncher-offline")
        @JvmField val puncherOpened = PrinterStateReason("puncher-opened")
        @JvmField val puncherOverTemperature = PrinterStateReason("puncher-over-temperature")
        @JvmField val puncherPowerSaver = PrinterStateReason("puncher-power-saver")
        @JvmField val puncherRecoverableFailure = PrinterStateReason("puncher-recoverable-failure")
        @JvmField val puncherRecoverableStorage = PrinterStateReason("puncher-recoverable-storage")
        @JvmField val puncherRemoved = PrinterStateReason("puncher-removed")
        @JvmField val puncherResourceAdded = PrinterStateReason("puncher-resource-added")
        @JvmField val puncherResourceRemoved = PrinterStateReason("puncher-resource-removed")
        @JvmField val puncherThermistorFailure = PrinterStateReason("puncher-thermistor-failure")
        @JvmField val puncherTimingFailure = PrinterStateReason("puncher-timing-failure")
        @JvmField val puncherTurnedOff = PrinterStateReason("puncher-turned-off")
        @JvmField val puncherTurnedOn = PrinterStateReason("puncher-turned-on")
        @JvmField val puncherUnderTemperature = PrinterStateReason("puncher-under-temperature")
        @JvmField val puncherUnrecoverableFailure = PrinterStateReason("puncher-unrecoverable-failure")
        @JvmField val puncherUnrecoverableStorageError = PrinterStateReason("puncher-unrecoverable-storage-error")
        @JvmField val puncherWarmingUp = PrinterStateReason("puncher-warming-up")
        @JvmField val separationCutterAdded = PrinterStateReason("separation-cutter-added")
        @JvmField val separationCutterAlmostEmpty = PrinterStateReason("separation-cutter-almost-empty")
        @JvmField val separationCutterAlmostFull = PrinterStateReason("separation-cutter-almost-full")
        @JvmField val separationCutterAtLimit = PrinterStateReason("separation-cutter-at-limit")
        @JvmField val separationCutterClosed = PrinterStateReason("separation-cutter-closed")
        @JvmField val separationCutterConfigurationChange = PrinterStateReason("separation-cutter-configuration-change")
        @JvmField val separationCutterCoverClosed = PrinterStateReason("separation-cutter-cover-closed")
        @JvmField val separationCutterCoverOpen = PrinterStateReason("separation-cutter-cover-open")
        @JvmField val separationCutterEmpty = PrinterStateReason("separation-cutter-empty")
        @JvmField val separationCutterFull = PrinterStateReason("separation-cutter-full")
        @JvmField val separationCutterInterlockClosed = PrinterStateReason("separation-cutter-interlock-closed")
        @JvmField val separationCutterInterlockOpen = PrinterStateReason("separation-cutter-interlock-open")
        @JvmField val separationCutterJam = PrinterStateReason("separation-cutter-jam")
        @JvmField val separationCutterLifeAlmostOver = PrinterStateReason("separation-cutter-life-almost-over")
        @JvmField val separationCutterLifeOver = PrinterStateReason("separation-cutter-life-over")
        @JvmField val separationCutterMemoryExhausted = PrinterStateReason("separation-cutter-memory-exhausted")
        @JvmField val separationCutterMissing = PrinterStateReason("separation-cutter-missing")
        @JvmField val separationCutterMotorFailure = PrinterStateReason("separation-cutter-motor-failure")
        @JvmField val separationCutterNearLimit = PrinterStateReason("separation-cutter-near-limit")
        @JvmField val separationCutterOffline = PrinterStateReason("separation-cutter-offline")
        @JvmField val separationCutterOpened = PrinterStateReason("separation-cutter-opened")
        @JvmField val separationCutterOverTemperature = PrinterStateReason("separation-cutter-over-temperature")
        @JvmField val separationCutterPowerSaver = PrinterStateReason("separation-cutter-power-saver")
        @JvmField val separationCutterRecoverableFailure = PrinterStateReason("separation-cutter-recoverable-failure")
        @JvmField val separationCutterRecoverableStorage = PrinterStateReason("separation-cutter-recoverable-storage")
        @JvmField val separationCutterRemoved = PrinterStateReason("separation-cutter-removed")
        @JvmField val separationCutterResourceAdded = PrinterStateReason("separation-cutter-resource-added")
        @JvmField val separationCutterResourceRemoved = PrinterStateReason("separation-cutter-resource-removed")
        @JvmField val separationCutterThermistorFailure = PrinterStateReason("separation-cutter-thermistor-failure")
        @JvmField val separationCutterTimingFailure = PrinterStateReason("separation-cutter-timing-failure")
        @JvmField val separationCutterTurnedOff = PrinterStateReason("separation-cutter-turned-off")
        @JvmField val separationCutterTurnedOn = PrinterStateReason("separation-cutter-turned-on")
        @JvmField val separationCutterUnderTemperature = PrinterStateReason("separation-cutter-under-temperature")
        @JvmField val separationCutterUnrecoverableFailure = PrinterStateReason("separation-cutter-unrecoverable-failure")
        @JvmField val separationCutterUnrecoverableStorageError = PrinterStateReason("separation-cutter-unrecoverable-storage-error")
        @JvmField val separationCutterWarmingUp = PrinterStateReason("separation-cutter-warming-up")
        @JvmField val sheetRotatorAdded = PrinterStateReason("sheet-rotator-added")
        @JvmField val sheetRotatorAlmostEmpty = PrinterStateReason("sheet-rotator-almost-empty")
        @JvmField val sheetRotatorAlmostFull = PrinterStateReason("sheet-rotator-almost-full")
        @JvmField val sheetRotatorAtLimit = PrinterStateReason("sheet-rotator-at-limit")
        @JvmField val sheetRotatorClosed = PrinterStateReason("sheet-rotator-closed")
        @JvmField val sheetRotatorConfigurationChange = PrinterStateReason("sheet-rotator-configuration-change")
        @JvmField val sheetRotatorCoverClosed = PrinterStateReason("sheet-rotator-cover-closed")
        @JvmField val sheetRotatorCoverOpen = PrinterStateReason("sheet-rotator-cover-open")
        @JvmField val sheetRotatorEmpty = PrinterStateReason("sheet-rotator-empty")
        @JvmField val sheetRotatorFull = PrinterStateReason("sheet-rotator-full")
        @JvmField val sheetRotatorInterlockClosed = PrinterStateReason("sheet-rotator-interlock-closed")
        @JvmField val sheetRotatorInterlockOpen = PrinterStateReason("sheet-rotator-interlock-open")
        @JvmField val sheetRotatorJam = PrinterStateReason("sheet-rotator-jam")
        @JvmField val sheetRotatorLifeAlmostOver = PrinterStateReason("sheet-rotator-life-almost-over")
        @JvmField val sheetRotatorLifeOver = PrinterStateReason("sheet-rotator-life-over")
        @JvmField val sheetRotatorMemoryExhausted = PrinterStateReason("sheet-rotator-memory-exhausted")
        @JvmField val sheetRotatorMissing = PrinterStateReason("sheet-rotator-missing")
        @JvmField val sheetRotatorMotorFailure = PrinterStateReason("sheet-rotator-motor-failure")
        @JvmField val sheetRotatorNearLimit = PrinterStateReason("sheet-rotator-near-limit")
        @JvmField val sheetRotatorOffline = PrinterStateReason("sheet-rotator-offline")
        @JvmField val sheetRotatorOpened = PrinterStateReason("sheet-rotator-opened")
        @JvmField val sheetRotatorOverTemperature = PrinterStateReason("sheet-rotator-over-temperature")
        @JvmField val sheetRotatorPowerSaver = PrinterStateReason("sheet-rotator-power-saver")
        @JvmField val sheetRotatorRecoverableFailure = PrinterStateReason("sheet-rotator-recoverable-failure")
        @JvmField val sheetRotatorRecoverableStorage = PrinterStateReason("sheet-rotator-recoverable-storage")
        @JvmField val sheetRotatorRemoved = PrinterStateReason("sheet-rotator-removed")
        @JvmField val sheetRotatorResourceAdded = PrinterStateReason("sheet-rotator-resource-added")
        @JvmField val sheetRotatorResourceRemoved = PrinterStateReason("sheet-rotator-resource-removed")
        @JvmField val sheetRotatorThermistorFailure = PrinterStateReason("sheet-rotator-thermistor-failure")
        @JvmField val sheetRotatorTimingFailure = PrinterStateReason("sheet-rotator-timing-failure")
        @JvmField val sheetRotatorTurnedOff = PrinterStateReason("sheet-rotator-turned-off")
        @JvmField val sheetRotatorTurnedOn = PrinterStateReason("sheet-rotator-turned-on")
        @JvmField val sheetRotatorUnderTemperature = PrinterStateReason("sheet-rotator-under-temperature")
        @JvmField val sheetRotatorUnrecoverableFailure = PrinterStateReason("sheet-rotator-unrecoverable-failure")
        @JvmField val sheetRotatorUnrecoverableStorageError = PrinterStateReason("sheet-rotator-unrecoverable-storage-error")
        @JvmField val sheetRotatorWarmingUp = PrinterStateReason("sheet-rotator-warming-up")
        @JvmField val shutdown = PrinterStateReason("shutdown")
        @JvmField val slitterAdded = PrinterStateReason("slitter-added")
        @JvmField val slitterAlmostEmpty = PrinterStateReason("slitter-almost-empty")
        @JvmField val slitterAlmostFull = PrinterStateReason("slitter-almost-full")
        @JvmField val slitterAtLimit = PrinterStateReason("slitter-at-limit")
        @JvmField val slitterClosed = PrinterStateReason("slitter-closed")
        @JvmField val slitterConfigurationChange = PrinterStateReason("slitter-configuration-change")
        @JvmField val slitterCoverClosed = PrinterStateReason("slitter-cover-closed")
        @JvmField val slitterCoverOpen = PrinterStateReason("slitter-cover-open")
        @JvmField val slitterEmpty = PrinterStateReason("slitter-empty")
        @JvmField val slitterFull = PrinterStateReason("slitter-full")
        @JvmField val slitterInterlockClosed = PrinterStateReason("slitter-interlock-closed")
        @JvmField val slitterInterlockOpen = PrinterStateReason("slitter-interlock-open")
        @JvmField val slitterJam = PrinterStateReason("slitter-jam")
        @JvmField val slitterLifeAlmostOver = PrinterStateReason("slitter-life-almost-over")
        @JvmField val slitterLifeOver = PrinterStateReason("slitter-life-over")
        @JvmField val slitterMemoryExhausted = PrinterStateReason("slitter-memory-exhausted")
        @JvmField val slitterMissing = PrinterStateReason("slitter-missing")
        @JvmField val slitterMotorFailure = PrinterStateReason("slitter-motor-failure")
        @JvmField val slitterNearLimit = PrinterStateReason("slitter-near-limit")
        @JvmField val slitterOffline = PrinterStateReason("slitter-offline")
        @JvmField val slitterOpened = PrinterStateReason("slitter-opened")
        @JvmField val slitterOverTemperature = PrinterStateReason("slitter-over-temperature")
        @JvmField val slitterPowerSaver = PrinterStateReason("slitter-power-saver")
        @JvmField val slitterRecoverableFailure = PrinterStateReason("slitter-recoverable-failure")
        @JvmField val slitterRecoverableStorage = PrinterStateReason("slitter-recoverable-storage")
        @JvmField val slitterRemoved = PrinterStateReason("slitter-removed")
        @JvmField val slitterResourceAdded = PrinterStateReason("slitter-resource-added")
        @JvmField val slitterResourceRemoved = PrinterStateReason("slitter-resource-removed")
        @JvmField val slitterThermistorFailure = PrinterStateReason("slitter-thermistor-failure")
        @JvmField val slitterTimingFailure = PrinterStateReason("slitter-timing-failure")
        @JvmField val slitterTurnedOff = PrinterStateReason("slitter-turned-off")
        @JvmField val slitterTurnedOn = PrinterStateReason("slitter-turned-on")
        @JvmField val slitterUnderTemperature = PrinterStateReason("slitter-under-temperature")
        @JvmField val slitterUnrecoverableFailure = PrinterStateReason("slitter-unrecoverable-failure")
        @JvmField val slitterUnrecoverableStorageError = PrinterStateReason("slitter-unrecoverable-storage-error")
        @JvmField val slitterWarmingUp = PrinterStateReason("slitter-warming-up")
        @JvmField val spoolAreaFull = PrinterStateReason("spool-area-full")
        @JvmField val stackerAdded = PrinterStateReason("stacker-added")
        @JvmField val stackerAlmostEmpty = PrinterStateReason("stacker-almost-empty")
        @JvmField val stackerAlmostFull = PrinterStateReason("stacker-almost-full")
        @JvmField val stackerAtLimit = PrinterStateReason("stacker-at-limit")
        @JvmField val stackerClosed = PrinterStateReason("stacker-closed")
        @JvmField val stackerConfigurationChange = PrinterStateReason("stacker-configuration-change")
        @JvmField val stackerCoverClosed = PrinterStateReason("stacker-cover-closed")
        @JvmField val stackerCoverOpen = PrinterStateReason("stacker-cover-open")
        @JvmField val stackerEmpty = PrinterStateReason("stacker-empty")
        @JvmField val stackerFull = PrinterStateReason("stacker-full")
        @JvmField val stackerInterlockClosed = PrinterStateReason("stacker-interlock-closed")
        @JvmField val stackerInterlockOpen = PrinterStateReason("stacker-interlock-open")
        @JvmField val stackerJam = PrinterStateReason("stacker-jam")
        @JvmField val stackerLifeAlmostOver = PrinterStateReason("stacker-life-almost-over")
        @JvmField val stackerLifeOver = PrinterStateReason("stacker-life-over")
        @JvmField val stackerMemoryExhausted = PrinterStateReason("stacker-memory-exhausted")
        @JvmField val stackerMissing = PrinterStateReason("stacker-missing")
        @JvmField val stackerMotorFailure = PrinterStateReason("stacker-motor-failure")
        @JvmField val stackerNearLimit = PrinterStateReason("stacker-near-limit")
        @JvmField val stackerOffline = PrinterStateReason("stacker-offline")
        @JvmField val stackerOpened = PrinterStateReason("stacker-opened")
        @JvmField val stackerOverTemperature = PrinterStateReason("stacker-over-temperature")
        @JvmField val stackerPowerSaver = PrinterStateReason("stacker-power-saver")
        @JvmField val stackerRecoverableFailure = PrinterStateReason("stacker-recoverable-failure")
        @JvmField val stackerRecoverableStorage = PrinterStateReason("stacker-recoverable-storage")
        @JvmField val stackerRemoved = PrinterStateReason("stacker-removed")
        @JvmField val stackerResourceAdded = PrinterStateReason("stacker-resource-added")
        @JvmField val stackerResourceRemoved = PrinterStateReason("stacker-resource-removed")
        @JvmField val stackerThermistorFailure = PrinterStateReason("stacker-thermistor-failure")
        @JvmField val stackerTimingFailure = PrinterStateReason("stacker-timing-failure")
        @JvmField val stackerTurnedOff = PrinterStateReason("stacker-turned-off")
        @JvmField val stackerTurnedOn = PrinterStateReason("stacker-turned-on")
        @JvmField val stackerUnderTemperature = PrinterStateReason("stacker-under-temperature")
        @JvmField val stackerUnrecoverableFailure = PrinterStateReason("stacker-unrecoverable-failure")
        @JvmField val stackerUnrecoverableStorageError = PrinterStateReason("stacker-unrecoverable-storage-error")
        @JvmField val stackerWarmingUp = PrinterStateReason("stacker-warming-up")
        @JvmField val staplerAdded = PrinterStateReason("stapler-added")
        @JvmField val staplerAlmostEmpty = PrinterStateReason("stapler-almost-empty")
        @JvmField val staplerAlmostFull = PrinterStateReason("stapler-almost-full")
        @JvmField val staplerAtLimit = PrinterStateReason("stapler-at-limit")
        @JvmField val staplerClosed = PrinterStateReason("stapler-closed")
        @JvmField val staplerConfigurationChange = PrinterStateReason("stapler-configuration-change")
        @JvmField val staplerCoverClosed = PrinterStateReason("stapler-cover-closed")
        @JvmField val staplerCoverOpen = PrinterStateReason("stapler-cover-open")
        @JvmField val staplerEmpty = PrinterStateReason("stapler-empty")
        @JvmField val staplerFull = PrinterStateReason("stapler-full")
        @JvmField val staplerInterlockClosed = PrinterStateReason("stapler-interlock-closed")
        @JvmField val staplerInterlockOpen = PrinterStateReason("stapler-interlock-open")
        @JvmField val staplerJam = PrinterStateReason("stapler-jam")
        @JvmField val staplerLifeAlmostOver = PrinterStateReason("stapler-life-almost-over")
        @JvmField val staplerLifeOver = PrinterStateReason("stapler-life-over")
        @JvmField val staplerMemoryExhausted = PrinterStateReason("stapler-memory-exhausted")
        @JvmField val staplerMissing = PrinterStateReason("stapler-missing")
        @JvmField val staplerMotorFailure = PrinterStateReason("stapler-motor-failure")
        @JvmField val staplerNearLimit = PrinterStateReason("stapler-near-limit")
        @JvmField val staplerOffline = PrinterStateReason("stapler-offline")
        @JvmField val staplerOpened = PrinterStateReason("stapler-opened")
        @JvmField val staplerOverTemperature = PrinterStateReason("stapler-over-temperature")
        @JvmField val staplerPowerSaver = PrinterStateReason("stapler-power-saver")
        @JvmField val staplerRecoverableFailure = PrinterStateReason("stapler-recoverable-failure")
        @JvmField val staplerRecoverableStorage = PrinterStateReason("stapler-recoverable-storage")
        @JvmField val staplerRemoved = PrinterStateReason("stapler-removed")
        @JvmField val staplerResourceAdded = PrinterStateReason("stapler-resource-added")
        @JvmField val staplerResourceRemoved = PrinterStateReason("stapler-resource-removed")
        @JvmField val staplerThermistorFailure = PrinterStateReason("stapler-thermistor-failure")
        @JvmField val staplerTimingFailure = PrinterStateReason("stapler-timing-failure")
        @JvmField val staplerTurnedOff = PrinterStateReason("stapler-turned-off")
        @JvmField val staplerTurnedOn = PrinterStateReason("stapler-turned-on")
        @JvmField val staplerUnderTemperature = PrinterStateReason("stapler-under-temperature")
        @JvmField val staplerUnrecoverableFailure = PrinterStateReason("stapler-unrecoverable-failure")
        @JvmField val staplerUnrecoverableStorageError = PrinterStateReason("stapler-unrecoverable-storage-error")
        @JvmField val staplerWarmingUp = PrinterStateReason("stapler-warming-up")
        @JvmField val stitcherAdded = PrinterStateReason("stitcher-added")
        @JvmField val stitcherAlmostEmpty = PrinterStateReason("stitcher-almost-empty")
        @JvmField val stitcherAlmostFull = PrinterStateReason("stitcher-almost-full")
        @JvmField val stitcherAtLimit = PrinterStateReason("stitcher-at-limit")
        @JvmField val stitcherClosed = PrinterStateReason("stitcher-closed")
        @JvmField val stitcherConfigurationChange = PrinterStateReason("stitcher-configuration-change")
        @JvmField val stitcherCoverClosed = PrinterStateReason("stitcher-cover-closed")
        @JvmField val stitcherCoverOpen = PrinterStateReason("stitcher-cover-open")
        @JvmField val stitcherEmpty = PrinterStateReason("stitcher-empty")
        @JvmField val stitcherFull = PrinterStateReason("stitcher-full")
        @JvmField val stitcherInterlockClosed = PrinterStateReason("stitcher-interlock-closed")
        @JvmField val stitcherInterlockOpen = PrinterStateReason("stitcher-interlock-open")
        @JvmField val stitcherJam = PrinterStateReason("stitcher-jam")
        @JvmField val stitcherLifeAlmostOver = PrinterStateReason("stitcher-life-almost-over")
        @JvmField val stitcherLifeOver = PrinterStateReason("stitcher-life-over")
        @JvmField val stitcherMemoryExhausted = PrinterStateReason("stitcher-memory-exhausted")
        @JvmField val stitcherMissing = PrinterStateReason("stitcher-missing")
        @JvmField val stitcherMotorFailure = PrinterStateReason("stitcher-motor-failure")
        @JvmField val stitcherNearLimit = PrinterStateReason("stitcher-near-limit")
        @JvmField val stitcherOffline = PrinterStateReason("stitcher-offline")
        @JvmField val stitcherOpened = PrinterStateReason("stitcher-opened")
        @JvmField val stitcherOverTemperature = PrinterStateReason("stitcher-over-temperature")
        @JvmField val stitcherPowerSaver = PrinterStateReason("stitcher-power-saver")
        @JvmField val stitcherRecoverableFailure = PrinterStateReason("stitcher-recoverable-failure")
        @JvmField val stitcherRecoverableStorage = PrinterStateReason("stitcher-recoverable-storage")
        @JvmField val stitcherRemoved = PrinterStateReason("stitcher-removed")
        @JvmField val stitcherResourceAdded = PrinterStateReason("stitcher-resource-added")
        @JvmField val stitcherResourceRemoved = PrinterStateReason("stitcher-resource-removed")
        @JvmField val stitcherThermistorFailure = PrinterStateReason("stitcher-thermistor-failure")
        @JvmField val stitcherTimingFailure = PrinterStateReason("stitcher-timing-failure")
        @JvmField val stitcherTurnedOff = PrinterStateReason("stitcher-turned-off")
        @JvmField val stitcherTurnedOn = PrinterStateReason("stitcher-turned-on")
        @JvmField val stitcherUnderTemperature = PrinterStateReason("stitcher-under-temperature")
        @JvmField val stitcherUnrecoverableFailure = PrinterStateReason("stitcher-unrecoverable-failure")
        @JvmField val stitcherUnrecoverableStorageError = PrinterStateReason("stitcher-unrecoverable-storage-error")
        @JvmField val stitcherWarmingUp = PrinterStateReason("stitcher-warming-up")
        @JvmField val stoppedPartly = PrinterStateReason("stopped-partly")
        @JvmField val stopping = PrinterStateReason("stopping")
        @JvmField val subunitAdded = PrinterStateReason("subunit-added")
        @JvmField val subunitAlmostEmpty = PrinterStateReason("subunit-almost-empty")
        @JvmField val subunitAlmostFull = PrinterStateReason("subunit-almost-full")
        @JvmField val subunitAtLimit = PrinterStateReason("subunit-at-limit")
        @JvmField val subunitClosed = PrinterStateReason("subunit-closed")
        @JvmField val subunitCoolingDown = PrinterStateReason("subunit-cooling-down")
        @JvmField val subunitEmpty = PrinterStateReason("subunit-empty")
        @JvmField val subunitFull = PrinterStateReason("subunit-full")
        @JvmField val subunitLifeAlmostOver = PrinterStateReason("subunit-life-almost-over")
        @JvmField val subunitLifeOver = PrinterStateReason("subunit-life-over")
        @JvmField val subunitMemoryExhausted = PrinterStateReason("subunit-memory-exhausted")
        @JvmField val subunitMissing = PrinterStateReason("subunit-missing")
        @JvmField val subunitMotorFailure = PrinterStateReason("subunit-motor-failure")
        @JvmField val subunitNearLimit = PrinterStateReason("subunit-near-limit")
        @JvmField val subunitOffline = PrinterStateReason("subunit-offline")
        @JvmField val subunitOpened = PrinterStateReason("subunit-opened")
        @JvmField val subunitOverTemperature = PrinterStateReason("subunit-over-temperature")
        @JvmField val subunitPowerSaver = PrinterStateReason("subunit-power-saver")
        @JvmField val subunitRecoverableFailure = PrinterStateReason("subunit-recoverable-failure")
        @JvmField val subunitRecoverableStorage = PrinterStateReason("subunit-recoverable-storage")
        @JvmField val subunitRemoved = PrinterStateReason("subunit-removed")
        @JvmField val subunitResourceAdded = PrinterStateReason("subunit-resource-added")
        @JvmField val subunitResourceRemoved = PrinterStateReason("subunit-resource-removed")
        @JvmField val subunitThermistorFailure = PrinterStateReason("subunit-thermistor-failure")
        @JvmField val subunitTimingFailure = PrinterStateReason("subunit-timing-Failure")
        @JvmField val subunitTurnedOff = PrinterStateReason("subunit-turned-off")
        @JvmField val subunitTurnedOn = PrinterStateReason("subunit-turned-on")
        @JvmField val subunitUnderTemperature = PrinterStateReason("subunit-under-temperature")
        @JvmField val subunitUnrecoverableFailure = PrinterStateReason("subunit-unrecoverable-failure")
        @JvmField val subunitUnrecoverableStorage = PrinterStateReason("subunit-unrecoverable-storage")
        @JvmField val subunitWarmingUp = PrinterStateReason("subunit-warming-up")
        @JvmField val timedOut = PrinterStateReason("timed-out")
        @JvmField val tonerEmpty = PrinterStateReason("toner-empty")
        @JvmField val tonerLow = PrinterStateReason("toner-low")
        @JvmField val trimmerAdded = PrinterStateReason("trimmer-added")
        @JvmField val trimmerAlmostEmpty = PrinterStateReason("trimmer-almost-empty")
        @JvmField val trimmerAlmostFull = PrinterStateReason("trimmer-almost-full")
        @JvmField val trimmerAtLimit = PrinterStateReason("trimmer-at-limit")
        @JvmField val trimmerClosed = PrinterStateReason("trimmer-closed")
        @JvmField val trimmerConfigurationChange = PrinterStateReason("trimmer-configuration-change")
        @JvmField val trimmerCoverClosed = PrinterStateReason("trimmer-cover-closed")
        @JvmField val trimmerCoverOpen = PrinterStateReason("trimmer-cover-open")
        @JvmField val trimmerEmpty = PrinterStateReason("trimmer-empty")
        @JvmField val trimmerFull = PrinterStateReason("trimmer-full")
        @JvmField val trimmerInterlockClosed = PrinterStateReason("trimmer-interlock-closed")
        @JvmField val trimmerInterlockOpen = PrinterStateReason("trimmer-interlock-open")
        @JvmField val trimmerJam = PrinterStateReason("trimmer-jam")
        @JvmField val trimmerLifeAlmostOver = PrinterStateReason("trimmer-life-almost-over")
        @JvmField val trimmerLifeOver = PrinterStateReason("trimmer-life-over")
        @JvmField val trimmerMemoryExhausted = PrinterStateReason("trimmer-memory-exhausted")
        @JvmField val trimmerMissing = PrinterStateReason("trimmer-missing")
        @JvmField val trimmerMotorFailure = PrinterStateReason("trimmer-motor-failure")
        @JvmField val trimmerNearLimit = PrinterStateReason("trimmer-near-limit")
        @JvmField val trimmerOffline = PrinterStateReason("trimmer-offline")
        @JvmField val trimmerOpened = PrinterStateReason("trimmer-opened")
        @JvmField val trimmerOverTemperature = PrinterStateReason("trimmer-over-temperature")
        @JvmField val trimmerPowerSaver = PrinterStateReason("trimmer-power-saver")
        @JvmField val trimmerRecoverableFailure = PrinterStateReason("trimmer-recoverable-failure")
        @JvmField val trimmerRecoverableStorage = PrinterStateReason("trimmer-recoverable-storage")
        @JvmField val trimmerRemoved = PrinterStateReason("trimmer-removed")
        @JvmField val trimmerResourceAdded = PrinterStateReason("trimmer-resource-added")
        @JvmField val trimmerResourceRemoved = PrinterStateReason("trimmer-resource-removed")
        @JvmField val trimmerThermistorFailure = PrinterStateReason("trimmer-thermistor-failure")
        @JvmField val trimmerTimingFailure = PrinterStateReason("trimmer-timing-failure")
        @JvmField val trimmerTurnedOff = PrinterStateReason("trimmer-turned-off")
        @JvmField val trimmerTurnedOn = PrinterStateReason("trimmer-turned-on")
        @JvmField val trimmerUnderTemperature = PrinterStateReason("trimmer-under-temperature")
        @JvmField val trimmerUnrecoverableFailure = PrinterStateReason("trimmer-unrecoverable-failure")
        @JvmField val trimmerUnrecoverableStorageError = PrinterStateReason("trimmer-unrecoverable-storage-error")
        @JvmField val trimmerWarmingUp = PrinterStateReason("trimmer-warming-up")
        @JvmField val unknown = PrinterStateReason("unknown")
        @JvmField val wrapperAdded = PrinterStateReason("wrapper-added")
        @JvmField val wrapperAlmostEmpty = PrinterStateReason("wrapper-almost-empty")
        @JvmField val wrapperAlmostFull = PrinterStateReason("wrapper-almost-full")
        @JvmField val wrapperAtLimit = PrinterStateReason("wrapper-at-limit")
        @JvmField val wrapperClosed = PrinterStateReason("wrapper-closed")
        @JvmField val wrapperConfigurationChange = PrinterStateReason("wrapper-configuration-change")
        @JvmField val wrapperCoverClosed = PrinterStateReason("wrapper-cover-closed")
        @JvmField val wrapperCoverOpen = PrinterStateReason("wrapper-cover-open")
        @JvmField val wrapperEmpty = PrinterStateReason("wrapper-empty")
        @JvmField val wrapperFull = PrinterStateReason("wrapper-full")
        @JvmField val wrapperInterlockClosed = PrinterStateReason("wrapper-interlock-closed")
        @JvmField val wrapperInterlockOpen = PrinterStateReason("wrapper-interlock-open")
        @JvmField val wrapperJam = PrinterStateReason("wrapper-jam")
        @JvmField val wrapperLifeAlmostOver = PrinterStateReason("wrapper-life-almost-over")
        @JvmField val wrapperLifeOver = PrinterStateReason("wrapper-life-over")
        @JvmField val wrapperMemoryExhausted = PrinterStateReason("wrapper-memory-exhausted")
        @JvmField val wrapperMissing = PrinterStateReason("wrapper-missing")
        @JvmField val wrapperMotorFailure = PrinterStateReason("wrapper-motor-failure")
        @JvmField val wrapperNearLimit = PrinterStateReason("wrapper-near-limit")
        @JvmField val wrapperOffline = PrinterStateReason("wrapper-offline")
        @JvmField val wrapperOpened = PrinterStateReason("wrapper-opened")
        @JvmField val wrapperOverTemperature = PrinterStateReason("wrapper-over-temperature")
        @JvmField val wrapperPowerSaver = PrinterStateReason("wrapper-power-saver")
        @JvmField val wrapperRecoverableFailure = PrinterStateReason("wrapper-recoverable-failure")
        @JvmField val wrapperRecoverableStorage = PrinterStateReason("wrapper-recoverable-storage")
        @JvmField val wrapperRemoved = PrinterStateReason("wrapper-removed")
        @JvmField val wrapperResourceAdded = PrinterStateReason("wrapper-resource-added")
        @JvmField val wrapperResourceRemoved = PrinterStateReason("wrapper-resource-removed")
        @JvmField val wrapperThermistorFailure = PrinterStateReason("wrapper-thermistor-failure")
        @JvmField val wrapperTimingFailure = PrinterStateReason("wrapper-timing-failure")
        @JvmField val wrapperTurnedOff = PrinterStateReason("wrapper-turned-off")
        @JvmField val wrapperTurnedOn = PrinterStateReason("wrapper-turned-on")
        @JvmField val wrapperUnderTemperature = PrinterStateReason("wrapper-under-temperature")
        @JvmField val wrapperUnrecoverableFailure = PrinterStateReason("wrapper-unrecoverable-failure")
        @JvmField val wrapperUnrecoverableStorageError = PrinterStateReason("wrapper-unrecoverable-storage-error")
        @JvmField val wrapperWarmingUp = PrinterStateReason("wrapper-warming-up")
        @JvmField val Encoder = KeywordType.encoderOf(PrinterStateReason::class.java) { value, _, _ ->
            PrinterStateReason(value)
        }
    }
}
